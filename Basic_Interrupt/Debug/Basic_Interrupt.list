
Basic_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007864  08007864  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800786c  0800786c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000810  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017fab  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003595  00000000  00000000  0003806b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0003b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  0003ca88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b4b  00000000  00000000  0003ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001918a  00000000  00000000  000618fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1dc7  00000000  00000000  0007aa85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c84c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059a4  00000000  00000000  0014c89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007830 	.word	0x08007830

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007830 	.word	0x08007830

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <delay_ms>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_ms (uint16_t ms)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1,0);
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <delay_ms+0x30>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < ms);
 80004de:	bf00      	nop
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <delay_ms+0x30>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d3f9      	bcc.n	80004e0 <delay_ms+0x14>

}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000160 	.word	0x20000160

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fc72 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f864 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f982 	bl	8000814 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000510:	f000 f8ca 	bl	80006a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000514:	f000 f8f6 	bl	8000704 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000518:	f006 fd42 	bl	8006fa0 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 800051c:	f000 f928 	bl	8000770 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000520:	482a      	ldr	r0, [pc, #168]	; (80005cc <main+0xcc>)
 8000522:	f003 fa83 	bl	8003a2c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052c:	4828      	ldr	r0, [pc, #160]	; (80005d0 <main+0xd0>)
 800052e:	f000 ffa1 	bl	8001474 <HAL_GPIO_WritePin>
			delay_ms(500);
 8000532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000536:	f7ff ffc9 	bl	80004cc <delay_ms>

			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000540:	4823      	ldr	r0, [pc, #140]	; (80005d0 <main+0xd0>)
 8000542:	f000 ff97 	bl	8001474 <HAL_GPIO_WritePin>
			delay_ms(500);
 8000546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054a:	f7ff ffbf 	bl	80004cc <delay_ms>

			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000554:	481e      	ldr	r0, [pc, #120]	; (80005d0 <main+0xd0>)
 8000556:	f000 ff8d 	bl	8001474 <HAL_GPIO_WritePin>
			delay_ms(500);
 800055a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055e:	f7ff ffb5 	bl	80004cc <delay_ms>

			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000568:	4819      	ldr	r0, [pc, #100]	; (80005d0 <main+0xd0>)
 800056a:	f000 ff83 	bl	8001474 <HAL_GPIO_WritePin>
			delay_ms(500);
 800056e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000572:	f7ff ffab 	bl	80004cc <delay_ms>

			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057c:	4814      	ldr	r0, [pc, #80]	; (80005d0 <main+0xd0>)
 800057e:	f000 ff79 	bl	8001474 <HAL_GPIO_WritePin>
			delay_ms(500);
 8000582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000586:	f7ff ffa1 	bl	80004cc <delay_ms>

			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	480f      	ldr	r0, [pc, #60]	; (80005d0 <main+0xd0>)
 8000592:	f000 ff6f 	bl	8001474 <HAL_GPIO_WritePin>
			delay_ms(500);
 8000596:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059a:	f7ff ff97 	bl	80004cc <delay_ms>

			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a4:	480a      	ldr	r0, [pc, #40]	; (80005d0 <main+0xd0>)
 80005a6:	f000 ff65 	bl	8001474 <HAL_GPIO_WritePin>
			delay_ms(500);
 80005aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ae:	f7ff ff8d 	bl	80004cc <delay_ms>

			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <main+0xd0>)
 80005ba:	f000 ff5b 	bl	8001474 <HAL_GPIO_WritePin>
			delay_ms(500);
 80005be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c2:	f7ff ff83 	bl	80004cc <delay_ms>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005c6:	f006 fd11 	bl	8006fec <MX_USB_HOST_Process>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 80005ca:	e7ac      	b.n	8000526 <main+0x26>
 80005cc:	20000160 	.word	0x20000160
 80005d0:	40020c00 	.word	0x40020c00

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f007 f81e 	bl	8007624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fc8b 	bl	8002f74 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 fa34 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2101      	movs	r1, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f002 feec 	bl	8003464 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000692:	f000 fa1d 	bl	8000ad0 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <MX_I2C1_Init+0x54>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006b4:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_I2C1_Init+0x58>)
 80006b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006e6:	f002 fb01 	bl	8002cec <HAL_I2C_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f0:	f000 f9ee 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000b4 	.word	0x200000b4
 80006fc:	40005400 	.word	0x40005400
 8000700:	000186a0 	.word	0x000186a0

08000704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_SPI1_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <MX_SPI1_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_SPI1_Init+0x64>)
 8000710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_SPI1_Init+0x64>)
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_SPI1_Init+0x64>)
 8000750:	220a      	movs	r2, #10
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_SPI1_Init+0x64>)
 8000756:	f003 f891 	bl	800387c <HAL_SPI_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 f9b6 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000108 	.word	0x20000108
 800076c:	40013000 	.word	0x40013000

08000770 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_TIM1_Init+0x9c>)
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <MX_TIM1_Init+0xa0>)
 8000790:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000-1;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_TIM1_Init+0x9c>)
 8000794:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000798:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_TIM1_Init+0x9c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_TIM1_Init+0x9c>)
 80007a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80007a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_TIM1_Init+0x9c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_TIM1_Init+0x9c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_TIM1_Init+0x9c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ba:	4814      	ldr	r0, [pc, #80]	; (800080c <MX_TIM1_Init+0x9c>)
 80007bc:	f003 f8e7 	bl	800398e <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007c6:	f000 f983 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_TIM1_Init+0x9c>)
 80007d8:	f003 f990 	bl	8003afc <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007e2:	f000 f975 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_TIM1_Init+0x9c>)
 80007f4:	f003 fb84 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80007fe:	f000 f967 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000160 	.word	0x20000160
 8000810:	40010000 	.word	0x40010000

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b86      	ldr	r3, [pc, #536]	; (8000a48 <MX_GPIO_Init+0x234>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a85      	ldr	r2, [pc, #532]	; (8000a48 <MX_GPIO_Init+0x234>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b83      	ldr	r3, [pc, #524]	; (8000a48 <MX_GPIO_Init+0x234>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b7f      	ldr	r3, [pc, #508]	; (8000a48 <MX_GPIO_Init+0x234>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a7e      	ldr	r2, [pc, #504]	; (8000a48 <MX_GPIO_Init+0x234>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b7c      	ldr	r3, [pc, #496]	; (8000a48 <MX_GPIO_Init+0x234>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b78      	ldr	r3, [pc, #480]	; (8000a48 <MX_GPIO_Init+0x234>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a77      	ldr	r2, [pc, #476]	; (8000a48 <MX_GPIO_Init+0x234>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b75      	ldr	r3, [pc, #468]	; (8000a48 <MX_GPIO_Init+0x234>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b71      	ldr	r3, [pc, #452]	; (8000a48 <MX_GPIO_Init+0x234>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a70      	ldr	r2, [pc, #448]	; (8000a48 <MX_GPIO_Init+0x234>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b6e      	ldr	r3, [pc, #440]	; (8000a48 <MX_GPIO_Init+0x234>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b6a      	ldr	r3, [pc, #424]	; (8000a48 <MX_GPIO_Init+0x234>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a69      	ldr	r2, [pc, #420]	; (8000a48 <MX_GPIO_Init+0x234>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b67      	ldr	r3, [pc, #412]	; (8000a48 <MX_GPIO_Init+0x234>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b63      	ldr	r3, [pc, #396]	; (8000a48 <MX_GPIO_Init+0x234>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a62      	ldr	r2, [pc, #392]	; (8000a48 <MX_GPIO_Init+0x234>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b60      	ldr	r3, [pc, #384]	; (8000a48 <MX_GPIO_Init+0x234>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2108      	movs	r1, #8
 80008d6:	485d      	ldr	r0, [pc, #372]	; (8000a4c <MX_GPIO_Init+0x238>)
 80008d8:	f000 fdcc 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	485b      	ldr	r0, [pc, #364]	; (8000a50 <MX_GPIO_Init+0x23c>)
 80008e2:	f000 fdc7 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	2200      	movs	r2, #0
 80008e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008ec:	4859      	ldr	r0, [pc, #356]	; (8000a54 <MX_GPIO_Init+0x240>)
 80008ee:	f000 fdc1 	bl	8001474 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008f2:	2308      	movs	r3, #8
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4850      	ldr	r0, [pc, #320]	; (8000a4c <MX_GPIO_Init+0x238>)
 800090a:	f000 fc17 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x23c>)
 8000926:	f000 fc09 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800092a:	2308      	movs	r3, #8
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093a:	2305      	movs	r3, #5
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4842      	ldr	r0, [pc, #264]	; (8000a50 <MX_GPIO_Init+0x23c>)
 8000946:	f000 fbf9 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : Buton_Kesme_Pin */
  GPIO_InitStruct.Pin = Buton_Kesme_Pin;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Buton_Kesme_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	483e      	ldr	r0, [pc, #248]	; (8000a58 <MX_GPIO_Init+0x244>)
 8000960:	f000 fbec 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000964:	2310      	movs	r3, #16
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000974:	2306      	movs	r3, #6
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4836      	ldr	r0, [pc, #216]	; (8000a58 <MX_GPIO_Init+0x244>)
 8000980:	f000 fbdc 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000984:	2304      	movs	r3, #4
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4831      	ldr	r0, [pc, #196]	; (8000a5c <MX_GPIO_Init+0x248>)
 8000998:	f000 fbd0 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ae:	2305      	movs	r3, #5
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4828      	ldr	r0, [pc, #160]	; (8000a5c <MX_GPIO_Init+0x248>)
 80009ba:	f000 fbbf 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009be:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	481f      	ldr	r0, [pc, #124]	; (8000a54 <MX_GPIO_Init+0x240>)
 80009d8:	f000 fbb0 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009dc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ee:	2306      	movs	r3, #6
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4815      	ldr	r0, [pc, #84]	; (8000a50 <MX_GPIO_Init+0x23c>)
 80009fa:	f000 fb9f 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009fe:	2320      	movs	r3, #32
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <MX_GPIO_Init+0x240>)
 8000a12:	f000 fb93 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a1a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <MX_GPIO_Init+0x238>)
 8000a2c:	f000 fb86 	bl	800113c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2006      	movs	r0, #6
 8000a36:	f000 fb4a 	bl	80010ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a3a:	2006      	movs	r0, #6
 8000a3c:	f000 fb63 	bl	8001106 <HAL_NVIC_EnableIRQ>

}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400

08000a60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	80fb      	strh	r3, [r7, #6]
    kesmedurumu = true;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
    i=1;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a7e:	f000 fcf9 	bl	8001474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a8a:	f000 fcf3 	bl	8001474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a96:	f000 fced 	bl	8001474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000aa2:	f000 fce7 	bl	8001474 <HAL_GPIO_WritePin>
	delay_ms(5000);
 8000aa6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aaa:	f7ff fd0f 	bl	80004cc <delay_ms>
	kesmedurumu =false;
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
	i=0;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000ac 	.word	0x200000ac
 8000ac8:	200000b0 	.word	0x200000b0
 8000acc:	40020c00 	.word	0x40020c00

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b1a:	2007      	movs	r0, #7
 8000b1c:	f000 facc 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_I2C_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12c      	bne.n	8000ba8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_I2C_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_I2C_MspInit+0x88>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_I2C_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b70:	2312      	movs	r3, #18
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <HAL_I2C_MspInit+0x8c>)
 8000b88:	f000 fad8 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_I2C_MspInit+0x88>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_I2C_MspInit+0x88>)
 8000b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_I2C_MspInit+0x88>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020400 	.word	0x40020400

08000bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_SPI_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12b      	bne.n	8000c36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_SPI_MspInit+0x88>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_SPI_MspInit+0x88>)
 8000be8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_SPI_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_SPI_MspInit+0x88>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_SPI_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c16:	23e0      	movs	r3, #224	; 0xe0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c26:	2305      	movs	r3, #5
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000c32:	f000 fa83 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40013000 	.word	0x40013000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10d      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_TIM_Base_MspInit+0x40>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0x40>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_TIM_Base_MspInit+0x40>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	40023800 	.word	0x40023800

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f8d8 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Buton_Kesme_Pin);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fbdd 	bl	80014a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <OTG_FS_IRQHandler+0x10>)
 8000cfa:	f000 fe57 	bl	80019ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000058c 	.word	0x2000058c

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f006 fc3a 	bl	80075b0 <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20020000 	.word	0x20020000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	200001a8 	.word	0x200001a8
 8000d70:	200008a0 	.word	0x200008a0

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f006 fbf9 	bl	80075bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fb99 	bl	8000500 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ddc:	08007874 	.word	0x08007874
  ldr r2, =_sbss
 8000de0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000de4:	200008a0 	.word	0x200008a0

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f94f 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fe5c 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f967 	bl	8001122 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f92f 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200001ac 	.word	0x200001ac

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001ac 	.word	0x200001ac

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <__NVIC_EnableIRQ+0x38>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff29 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff3e 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff31 	bl	8000f7c <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e16b      	b.n	8001430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 815a 	bne.w	800142a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80b4 	beq.w	800142a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b60      	ldr	r3, [pc, #384]	; (8001448 <HAL_GPIO_Init+0x30c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a5f      	ldr	r2, [pc, #380]	; (8001448 <HAL_GPIO_Init+0x30c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b5d      	ldr	r3, [pc, #372]	; (8001448 <HAL_GPIO_Init+0x30c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a5b      	ldr	r2, [pc, #364]	; (800144c <HAL_GPIO_Init+0x310>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_GPIO_Init+0x314>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d02b      	beq.n	8001362 <HAL_GPIO_Init+0x226>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a51      	ldr	r2, [pc, #324]	; (8001454 <HAL_GPIO_Init+0x318>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d025      	beq.n	800135e <HAL_GPIO_Init+0x222>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_GPIO_Init+0x31c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01f      	beq.n	800135a <HAL_GPIO_Init+0x21e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_GPIO_Init+0x320>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0x21a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_GPIO_Init+0x324>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x216>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <HAL_GPIO_Init+0x328>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x212>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x32c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x20e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_GPIO_Init+0x330>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x20a>
 8001342:	2307      	movs	r3, #7
 8001344:	e00e      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001346:	2308      	movs	r3, #8
 8001348:	e00c      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800134a:	2306      	movs	r3, #6
 800134c:	e00a      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800134e:	2305      	movs	r3, #5
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001352:	2304      	movs	r3, #4
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x228>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x228>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x310>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <HAL_GPIO_Init+0x334>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a32      	ldr	r2, [pc, #200]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fa:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <HAL_GPIO_Init+0x334>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_GPIO_Init+0x334>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <HAL_GPIO_Init+0x334>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f ae90 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40021400 	.word	0x40021400
 8001468:	40021800 	.word	0x40021800
 800146c:	40021c00 	.word	0x40021c00
 8001470:	40013c00 	.word	0x40013c00

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001490:	e003      	b.n	800149a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	041a      	lsls	r2, r3, #16
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff faca 	bl	8000a60 <HAL_GPIO_EXTI_Callback>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40013c00 	.word	0x40013c00

080014d8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	b08f      	sub	sp, #60	; 0x3c
 80014dc:	af0a      	add	r7, sp, #40	; 0x28
 80014de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e054      	b.n	8001594 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d106      	bne.n	800150a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f005 fda9 	bl	800705c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2203      	movs	r2, #3
 800150e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fdd7 	bl	80040dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	687e      	ldr	r6, [r7, #4]
 8001536:	466d      	mov	r5, sp
 8001538:	f106 0410 	add.w	r4, r6, #16
 800153c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001544:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001548:	e885 0003 	stmia.w	r5, {r0, r1}
 800154c:	1d33      	adds	r3, r6, #4
 800154e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f002 fd51 	bl	8003ff8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2101      	movs	r1, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f002 fdce 	bl	80040fe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	687e      	ldr	r6, [r7, #4]
 800156a:	466d      	mov	r5, sp
 800156c:	f106 0410 	add.w	r4, r6, #16
 8001570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001578:	e894 0003 	ldmia.w	r4, {r0, r1}
 800157c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001580:	1d33      	adds	r3, r6, #4
 8001582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f002 ff57 	bl	8004438 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800159c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	4608      	mov	r0, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	4603      	mov	r3, r0
 80015ac:	70fb      	strb	r3, [r7, #3]
 80015ae:	460b      	mov	r3, r1
 80015b0:	70bb      	strb	r3, [r7, #2]
 80015b2:	4613      	mov	r3, r2
 80015b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_HCD_HC_Init+0x28>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e076      	b.n	80016b2 <HAL_HCD_HC_Init+0x116>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	212c      	movs	r1, #44	; 0x2c
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	333d      	adds	r3, #61	; 0x3d
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	212c      	movs	r1, #44	; 0x2c
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	3338      	adds	r3, #56	; 0x38
 80015ec:	787a      	ldrb	r2, [r7, #1]
 80015ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	212c      	movs	r1, #44	; 0x2c
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	3340      	adds	r3, #64	; 0x40
 80015fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001600:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	212c      	movs	r1, #44	; 0x2c
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	3339      	adds	r3, #57	; 0x39
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	333f      	adds	r3, #63	; 0x3f
 8001622:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001626:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	78ba      	ldrb	r2, [r7, #2]
 800162c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001630:	b2d0      	uxtb	r0, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	212c      	movs	r1, #44	; 0x2c
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	4413      	add	r3, r2
 800163c:	333a      	adds	r3, #58	; 0x3a
 800163e:	4602      	mov	r2, r0
 8001640:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001642:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001646:	2b00      	cmp	r3, #0
 8001648:	da09      	bge.n	800165e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	212c      	movs	r1, #44	; 0x2c
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	333b      	adds	r3, #59	; 0x3b
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	e008      	b.n	8001670 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	212c      	movs	r1, #44	; 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	333b      	adds	r3, #59	; 0x3b
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	212c      	movs	r1, #44	; 0x2c
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	4413      	add	r3, r2
 800167c:	333c      	adds	r3, #60	; 0x3c
 800167e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001682:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	787c      	ldrb	r4, [r7, #1]
 800168a:	78ba      	ldrb	r2, [r7, #2]
 800168c:	78f9      	ldrb	r1, [r7, #3]
 800168e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	f897 3020 	ldrb.w	r3, [r7, #32]
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4623      	mov	r3, r4
 80016a0:	f003 f850 	bl	8004744 <USB_HC_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd90      	pop	{r4, r7, pc}

080016ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_HCD_HC_Halt+0x1e>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e00f      	b.n	80016f8 <HAL_HCD_HC_Halt+0x3e>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 faa0 	bl	8004c2e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	4608      	mov	r0, r1
 800170a:	4611      	mov	r1, r2
 800170c:	461a      	mov	r2, r3
 800170e:	4603      	mov	r3, r0
 8001710:	70fb      	strb	r3, [r7, #3]
 8001712:	460b      	mov	r3, r1
 8001714:	70bb      	strb	r3, [r7, #2]
 8001716:	4613      	mov	r3, r2
 8001718:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	212c      	movs	r1, #44	; 0x2c
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	333b      	adds	r3, #59	; 0x3b
 8001728:	78ba      	ldrb	r2, [r7, #2]
 800172a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	212c      	movs	r1, #44	; 0x2c
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	4413      	add	r3, r2
 8001738:	333f      	adds	r3, #63	; 0x3f
 800173a:	787a      	ldrb	r2, [r7, #1]
 800173c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800173e:	7c3b      	ldrb	r3, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d112      	bne.n	800176a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	212c      	movs	r1, #44	; 0x2c
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	4413      	add	r3, r2
 8001750:	3342      	adds	r3, #66	; 0x42
 8001752:	2203      	movs	r2, #3
 8001754:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	333d      	adds	r3, #61	; 0x3d
 8001764:	7f3a      	ldrb	r2, [r7, #28]
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e008      	b.n	800177c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b03      	cmp	r3, #3
 8001780:	f200 80c6 	bhi.w	8001910 <HAL_HCD_HC_SubmitRequest+0x210>
 8001784:	a201      	add	r2, pc, #4	; (adr r2, 800178c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178a:	bf00      	nop
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080018fd 	.word	0x080018fd
 8001794:	08001801 	.word	0x08001801
 8001798:	0800187f 	.word	0x0800187f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800179c:	7c3b      	ldrb	r3, [r7, #16]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	f040 80b8 	bne.w	8001914 <HAL_HCD_HC_SubmitRequest+0x214>
 80017a4:	78bb      	ldrb	r3, [r7, #2]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 80b4 	bne.w	8001914 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017ac:	8b3b      	ldrh	r3, [r7, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d108      	bne.n	80017c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	3355      	adds	r3, #85	; 0x55
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3355      	adds	r3, #85	; 0x55
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ea:	e093      	b.n	8001914 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3342      	adds	r3, #66	; 0x42
 80017fa:	2202      	movs	r2, #2
 80017fc:	701a      	strb	r2, [r3, #0]
      break;
 80017fe:	e089      	b.n	8001914 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001800:	78bb      	ldrb	r3, [r7, #2]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d11d      	bne.n	8001842 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	3355      	adds	r3, #85	; 0x55
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	212c      	movs	r1, #44	; 0x2c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	3342      	adds	r3, #66	; 0x42
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800182c:	e073      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3342      	adds	r3, #66	; 0x42
 800183c:	2202      	movs	r2, #2
 800183e:	701a      	strb	r2, [r3, #0]
      break;
 8001840:	e069      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3354      	adds	r3, #84	; 0x54
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3342      	adds	r3, #66	; 0x42
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
      break;
 8001868:	e055      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	212c      	movs	r1, #44	; 0x2c
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	3342      	adds	r3, #66	; 0x42
 8001878:	2202      	movs	r2, #2
 800187a:	701a      	strb	r2, [r3, #0]
      break;
 800187c:	e04b      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800187e:	78bb      	ldrb	r3, [r7, #2]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d11d      	bne.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	3355      	adds	r3, #85	; 0x55
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	212c      	movs	r1, #44	; 0x2c
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	3342      	adds	r3, #66	; 0x42
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018aa:	e034      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3342      	adds	r3, #66	; 0x42
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]
      break;
 80018be:	e02a      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3354      	adds	r3, #84	; 0x54
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
      break;
 80018e6:	e016      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	3342      	adds	r3, #66	; 0x42
 80018f6:	2202      	movs	r2, #2
 80018f8:	701a      	strb	r2, [r3, #0]
      break;
 80018fa:	e00c      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3342      	adds	r3, #66	; 0x42
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
      break;
 800190e:	e002      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001910:	bf00      	nop
 8001912:	e000      	b.n	8001916 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001914:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3344      	adds	r3, #68	; 0x44
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	8b3a      	ldrh	r2, [r7, #24]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	202c      	movs	r0, #44	; 0x2c
 8001930:	fb00 f303 	mul.w	r3, r0, r3
 8001934:	440b      	add	r3, r1
 8001936:	334c      	adds	r3, #76	; 0x4c
 8001938:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	212c      	movs	r1, #44	; 0x2c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3360      	adds	r3, #96	; 0x60
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3350      	adds	r3, #80	; 0x50
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3339      	adds	r3, #57	; 0x39
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3361      	adds	r3, #97	; 0x61
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	222c      	movs	r2, #44	; 0x2c
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	3338      	adds	r3, #56	; 0x38
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	18d1      	adds	r1, r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	f002 fff4 	bl	8004988 <USB_HC_StartXfer>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop

080019ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fcf5 	bl	80043b2 <USB_GetMode>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	f040 80f6 	bne.w	8001bbc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fcd9 	bl	800438c <USB_ReadInterrupts>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80ec 	beq.w	8001bba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fcd0 	bl	800438c <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019f6:	d104      	bne.n	8001a02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fcc0 	bl	800438c <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a16:	d104      	bne.n	8001a22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fcb0 	bl	800438c <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a36:	d104      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fca0 	bl	800438c <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d103      	bne.n	8001a5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fc92 	bl	800438c <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a72:	d11c      	bne.n	8001aae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10f      	bne.n	8001aae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a8e:	2110      	movs	r1, #16
 8001a90:	6938      	ldr	r0, [r7, #16]
 8001a92:	f002 fb81 	bl	8004198 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a96:	6938      	ldr	r0, [r7, #16]
 8001a98:	f002 fbb2 	bl	8004200 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fd88 	bl	80045b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f005 fb55 	bl	8007158 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fc6a 	bl	800438c <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001abe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac2:	d102      	bne.n	8001aca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f001 f89e 	bl	8002c06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fc5c 	bl	800438c <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d106      	bne.n	8001aec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f005 fb1e 	bl	8007120 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2208      	movs	r2, #8
 8001aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fc4b 	bl	800438c <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d101      	bne.n	8001b04 <HAL_HCD_IRQHandler+0x158>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_HCD_IRQHandler+0x15a>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d012      	beq.n	8001b30 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0210 	bic.w	r2, r2, #16
 8001b18:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 ffa1 	bl	8002a62 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699a      	ldr	r2, [r3, #24]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0210 	orr.w	r2, r2, #16
 8001b2e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fc29 	bl	800438c <USB_ReadInterrupts>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b44:	d13a      	bne.n	8001bbc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 f85e 	bl	8004c0c <USB_HC_ReadInterrupt>
 8001b50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e025      	b.n	8001ba4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d018      	beq.n	8001b9e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	015a      	lsls	r2, r3, #5
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b82:	d106      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f8ab 	bl	8001ce6 <HCD_HC_IN_IRQHandler>
 8001b90:	e005      	b.n	8001b9e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fbf9 	bl	8002390 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d3d4      	bcc.n	8001b58 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb6:	615a      	str	r2, [r3, #20]
 8001bb8:	e000      	b.n	8001bbc <HAL_HCD_IRQHandler+0x210>
      return;
 8001bba:	bf00      	nop
    }
  }
}
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_HCD_Start+0x16>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e013      	b.n	8001c00 <HAL_HCD_Start+0x3e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fd4a 	bl	8004680 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fa62 	bl	80040ba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_HCD_Stop+0x16>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e00d      	b.n	8001c3a <HAL_HCD_Stop+0x32>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 f938 	bl	8004ea0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fcec 	bl	800462c <USB_ResetPort>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	3360      	adds	r3, #96	; 0x60
 8001c78:	781b      	ldrb	r3, [r3, #0]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	212c      	movs	r1, #44	; 0x2c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3350      	adds	r3, #80	; 0x50
 8001ca0:	681b      	ldr	r3, [r3, #0]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 fd30 	bl	8004720 <USB_GetCurrentFrame>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 fd0b 	bl	80046f2 <USB_GetHostSpeed>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d11a      	bne.n	8001d4c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d22:	461a      	mov	r2, r3
 8001d24:	2304      	movs	r3, #4
 8001d26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	212c      	movs	r1, #44	; 0x2c
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	3361      	adds	r3, #97	; 0x61
 8001d36:	2206      	movs	r2, #6
 8001d38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 ff72 	bl	8004c2e <USB_HC_Halt>
 8001d4a:	e0af      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d62:	d11b      	bne.n	8001d9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	461a      	mov	r2, r3
 8001d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	212c      	movs	r1, #44	; 0x2c
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	3361      	adds	r3, #97	; 0x61
 8001d86:	2207      	movs	r2, #7
 8001d88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 ff4a 	bl	8004c2e <USB_HC_Halt>
 8001d9a:	e087      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	d109      	bne.n	8001dc6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	6093      	str	r3, [r2, #8]
 8001dc4:	e072      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d11a      	bne.n	8001e12 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	461a      	mov	r2, r3
 8001dea:	2308      	movs	r3, #8
 8001dec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3361      	adds	r3, #97	; 0x61
 8001dfc:	2205      	movs	r2, #5
 8001dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 ff0f 	bl	8004c2e <USB_HC_Halt>
 8001e10:	e04c      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e28:	d11b      	bne.n	8001e62 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e36:	461a      	mov	r2, r3
 8001e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3361      	adds	r3, #97	; 0x61
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 fee7 	bl	8004c2e <USB_HC_Halt>
 8001e60:	e024      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e74:	2b80      	cmp	r3, #128	; 0x80
 8001e76:	d119      	bne.n	8001eac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	461a      	mov	r2, r3
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	3361      	adds	r3, #97	; 0x61
 8001e98:	2206      	movs	r2, #6
 8001e9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fec1 	bl	8004c2e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec2:	d112      	bne.n	8001eea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fead 	bl	8004c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ee8:	e24e      	b.n	8002388 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	f040 80df 	bne.w	80020c0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d019      	beq.n	8001f3e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	212c      	movs	r1, #44	; 0x2c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	3348      	adds	r3, #72	; 0x48
 8001f18:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	0159      	lsls	r1, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	440b      	add	r3, r1
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f2c:	1ad2      	subs	r2, r2, r3
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	202c      	movs	r0, #44	; 0x2c
 8001f34:	fb00 f303 	mul.w	r3, r0, r3
 8001f38:	440b      	add	r3, r1
 8001f3a:	3350      	adds	r3, #80	; 0x50
 8001f3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3361      	adds	r3, #97	; 0x61
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	335c      	adds	r3, #92	; 0x5c
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2301      	movs	r3, #1
 8001f72:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	212c      	movs	r1, #44	; 0x2c
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	333f      	adds	r3, #63	; 0x3f
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d009      	beq.n	8001f9c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	333f      	adds	r3, #63	; 0x3f
 8001f96:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d111      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 fe41 	bl	8004c2e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2310      	movs	r3, #16
 8001fbc:	6093      	str	r3, [r2, #8]
 8001fbe:	e03a      	b.n	8002036 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	333f      	adds	r3, #63	; 0x3f
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d009      	beq.n	8001fe8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	333f      	adds	r3, #63	; 0x3f
 8001fe2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d126      	bne.n	8002036 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	0151      	lsls	r1, r2, #5
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	440a      	add	r2, r1
 8001ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002006:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	3360      	adds	r3, #96	; 0x60
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	b2d9      	uxtb	r1, r3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	202c      	movs	r0, #44	; 0x2c
 8002024:	fb00 f303 	mul.w	r3, r0, r3
 8002028:	4413      	add	r3, r2
 800202a:	3360      	adds	r3, #96	; 0x60
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f005 f89f 	bl	8007174 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d12b      	bne.n	8002096 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3348      	adds	r3, #72	; 0x48
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	202c      	movs	r0, #44	; 0x2c
 8002054:	fb00 f202 	mul.w	r2, r0, r2
 8002058:	440a      	add	r2, r1
 800205a:	3240      	adds	r2, #64	; 0x40
 800205c:	8812      	ldrh	r2, [r2, #0]
 800205e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 818e 	beq.w	8002388 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3354      	adds	r3, #84	; 0x54
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2d8      	uxtb	r0, r3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3354      	adds	r3, #84	; 0x54
 8002090:	4602      	mov	r2, r0
 8002092:	701a      	strb	r2, [r3, #0]
}
 8002094:	e178      	b.n	8002388 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	3354      	adds	r3, #84	; 0x54
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2d8      	uxtb	r0, r3
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3354      	adds	r3, #84	; 0x54
 80020ba:	4602      	mov	r2, r0
 80020bc:	701a      	strb	r2, [r3, #0]
}
 80020be:	e163      	b.n	8002388 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	f040 80f6 	bne.w	80022c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3361      	adds	r3, #97	; 0x61
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d109      	bne.n	8002100 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3360      	adds	r3, #96	; 0x60
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e0c9      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3361      	adds	r3, #97	; 0x61
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b05      	cmp	r3, #5
 8002112:	d109      	bne.n	8002128 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3360      	adds	r3, #96	; 0x60
 8002122:	2205      	movs	r2, #5
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e0b5      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3361      	adds	r3, #97	; 0x61
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d009      	beq.n	8002150 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3361      	adds	r3, #97	; 0x61
 800214a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800214c:	2b08      	cmp	r3, #8
 800214e:	d150      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	335c      	adds	r3, #92	; 0x5c
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	202c      	movs	r0, #44	; 0x2c
 8002168:	fb00 f303 	mul.w	r3, r0, r3
 800216c:	440b      	add	r3, r1
 800216e:	335c      	adds	r3, #92	; 0x5c
 8002170:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	335c      	adds	r3, #92	; 0x5c
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d912      	bls.n	80021ac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	335c      	adds	r3, #92	; 0x5c
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3360      	adds	r3, #96	; 0x60
 80021a6:	2204      	movs	r2, #4
 80021a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021aa:	e073      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3360      	adds	r3, #96	; 0x60
 80021ba:	2202      	movs	r2, #2
 80021bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021f0:	e050      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	3361      	adds	r3, #97	; 0x61
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d122      	bne.n	800224c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	3360      	adds	r3, #96	; 0x60
 8002214:	2202      	movs	r2, #2
 8002216:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800222e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002236:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	461a      	mov	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e023      	b.n	8002294 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3361      	adds	r3, #97	; 0x61
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b07      	cmp	r3, #7
 800225e:	d119      	bne.n	8002294 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	335c      	adds	r3, #92	; 0x5c
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	202c      	movs	r0, #44	; 0x2c
 8002278:	fb00 f303 	mul.w	r3, r0, r3
 800227c:	440b      	add	r3, r1
 800227e:	335c      	adds	r3, #92	; 0x5c
 8002280:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	3360      	adds	r3, #96	; 0x60
 8002290:	2204      	movs	r2, #4
 8002292:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	2302      	movs	r3, #2
 80022a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	b2d9      	uxtb	r1, r3
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	202c      	movs	r0, #44	; 0x2c
 80022b0:	fb00 f303 	mul.w	r3, r0, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3360      	adds	r3, #96	; 0x60
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f004 ff59 	bl	8007174 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022c2:	e061      	b.n	8002388 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d156      	bne.n	8002388 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	333f      	adds	r3, #63	; 0x3f
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d111      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	335c      	adds	r3, #92	; 0x5c
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fc8f 	bl	8004c2e <USB_HC_Halt>
 8002310:	e031      	b.n	8002376 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	333f      	adds	r3, #63	; 0x3f
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	333f      	adds	r3, #63	; 0x3f
 8002334:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002336:	2b02      	cmp	r3, #2
 8002338:	d11d      	bne.n	8002376 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	335c      	adds	r3, #92	; 0x5c
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d110      	bne.n	8002376 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3361      	adds	r3, #97	; 0x61
 8002362:	2203      	movs	r2, #3
 8002364:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f002 fc5c 	bl	8004c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4413      	add	r3, r2
 800237e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002382:	461a      	mov	r2, r3
 8002384:	2310      	movs	r3, #16
 8002386:	6093      	str	r3, [r2, #8]
}
 8002388:	bf00      	nop
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11a      	bne.n	80023f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	461a      	mov	r2, r3
 80023ce:	2304      	movs	r3, #4
 80023d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3361      	adds	r3, #97	; 0x61
 80023e0:	2206      	movs	r2, #6
 80023e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fc1d 	bl	8004c2e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023f4:	e331      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b20      	cmp	r3, #32
 800240a:	d12e      	bne.n	800246a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	461a      	mov	r2, r3
 800241a:	2320      	movs	r3, #32
 800241c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	333d      	adds	r3, #61	; 0x3d
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	f040 8313 	bne.w	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	333d      	adds	r3, #61	; 0x3d
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3360      	adds	r3, #96	; 0x60
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f002 fbe3 	bl	8004c2e <USB_HC_Halt>
}
 8002468:	e2f7      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4413      	add	r3, r2
 8002472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002480:	d112      	bne.n	80024a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	461a      	mov	r2, r3
 8002490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002494:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 fbc4 	bl	8004c2e <USB_HC_Halt>
}
 80024a6:	e2d8      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d140      	bne.n	8002540 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	335c      	adds	r3, #92	; 0x5c
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d111      	bne.n	800250a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	333d      	adds	r3, #61	; 0x3d
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	461a      	mov	r2, r3
 8002506:	2340      	movs	r3, #64	; 0x40
 8002508:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	461a      	mov	r2, r3
 8002518:	2301      	movs	r3, #1
 800251a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3361      	adds	r3, #97	; 0x61
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f002 fb78 	bl	8004c2e <USB_HC_Halt>
}
 800253e:	e28c      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b40      	cmp	r3, #64	; 0x40
 8002554:	d12c      	bne.n	80025b0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3361      	adds	r3, #97	; 0x61
 8002564:	2204      	movs	r2, #4
 8002566:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	333d      	adds	r3, #61	; 0x3d
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	335c      	adds	r3, #92	; 0x5c
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fb49 	bl	8004c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	6093      	str	r3, [r2, #8]
}
 80025ae:	e254      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11a      	bne.n	80025fc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	461a      	mov	r2, r3
 80025d4:	2308      	movs	r3, #8
 80025d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3361      	adds	r3, #97	; 0x61
 80025e6:	2205      	movs	r2, #5
 80025e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fb1a 	bl	8004c2e <USB_HC_Halt>
}
 80025fa:	e22e      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b10      	cmp	r3, #16
 8002610:	d140      	bne.n	8002694 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3361      	adds	r3, #97	; 0x61
 8002632:	2203      	movs	r2, #3
 8002634:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	333d      	adds	r3, #61	; 0x3d
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d112      	bne.n	8002670 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	333c      	adds	r3, #60	; 0x3c
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	333d      	adds	r3, #61	; 0x3d
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f002 fad7 	bl	8004c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	461a      	mov	r2, r3
 800268e:	2310      	movs	r3, #16
 8002690:	6093      	str	r3, [r2, #8]
}
 8002692:	e1e2      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b80      	cmp	r3, #128	; 0x80
 80026a8:	d164      	bne.n	8002774 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d111      	bne.n	80026d6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3361      	adds	r3, #97	; 0x61
 80026c0:	2206      	movs	r2, #6
 80026c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 faad 	bl	8004c2e <USB_HC_Halt>
 80026d4:	e044      	b.n	8002760 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	335c      	adds	r3, #92	; 0x5c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	202c      	movs	r0, #44	; 0x2c
 80026ee:	fb00 f303 	mul.w	r3, r0, r3
 80026f2:	440b      	add	r3, r1
 80026f4:	335c      	adds	r3, #92	; 0x5c
 80026f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	335c      	adds	r3, #92	; 0x5c
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d920      	bls.n	800274e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	335c      	adds	r3, #92	; 0x5c
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3360      	adds	r3, #96	; 0x60
 800272c:	2204      	movs	r2, #4
 800272e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	b2d9      	uxtb	r1, r3
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	202c      	movs	r0, #44	; 0x2c
 800273a:	fb00 f303 	mul.w	r3, r0, r3
 800273e:	4413      	add	r3, r2
 8002740:	3360      	adds	r3, #96	; 0x60
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f004 fd14 	bl	8007174 <HAL_HCD_HC_NotifyURBChange_Callback>
 800274c:	e008      	b.n	8002760 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	3360      	adds	r3, #96	; 0x60
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	6093      	str	r3, [r2, #8]
}
 8002772:	e172      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278a:	d11b      	bne.n	80027c4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	3361      	adds	r3, #97	; 0x61
 800279a:	2208      	movs	r2, #8
 800279c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f002 fa40 	bl	8004c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ba:	461a      	mov	r2, r3
 80027bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c0:	6093      	str	r3, [r2, #8]
}
 80027c2:	e14a      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	f040 813f 	bne.w	8002a5a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3361      	adds	r3, #97	; 0x61
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d17d      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3360      	adds	r3, #96	; 0x60
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	333f      	adds	r3, #63	; 0x3f
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d00a      	beq.n	800282c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	333f      	adds	r3, #63	; 0x3f
 8002824:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002826:	2b03      	cmp	r3, #3
 8002828:	f040 8100 	bne.w	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d113      	bne.n	800285c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3355      	adds	r3, #85	; 0x55
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	f083 0301 	eor.w	r3, r3, #1
 8002848:	b2d8      	uxtb	r0, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3355      	adds	r3, #85	; 0x55
 8002858:	4602      	mov	r2, r0
 800285a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 80e3 	bne.w	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	334c      	adds	r3, #76	; 0x4c
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80d8 	beq.w	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	334c      	adds	r3, #76	; 0x4c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	202c      	movs	r0, #44	; 0x2c
 8002892:	fb00 f202 	mul.w	r2, r0, r2
 8002896:	440a      	add	r2, r1
 8002898:	3240      	adds	r2, #64	; 0x40
 800289a:	8812      	ldrh	r2, [r2, #0]
 800289c:	4413      	add	r3, r2
 800289e:	3b01      	subs	r3, #1
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	202c      	movs	r0, #44	; 0x2c
 80028a6:	fb00 f202 	mul.w	r2, r0, r2
 80028aa:	440a      	add	r2, r1
 80028ac:	3240      	adds	r2, #64	; 0x40
 80028ae:	8812      	ldrh	r2, [r2, #0]
 80028b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80b5 	beq.w	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3355      	adds	r3, #85	; 0x55
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f083 0301 	eor.w	r3, r3, #1
 80028d6:	b2d8      	uxtb	r0, r3
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3355      	adds	r3, #85	; 0x55
 80028e6:	4602      	mov	r2, r0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e09f      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d109      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3360      	adds	r3, #96	; 0x60
 800290e:	2202      	movs	r2, #2
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e08b      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3361      	adds	r3, #97	; 0x61
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d109      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	2202      	movs	r2, #2
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e077      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3361      	adds	r3, #97	; 0x61
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d109      	bne.n	8002964 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3360      	adds	r3, #96	; 0x60
 800295e:	2205      	movs	r2, #5
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e063      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d009      	beq.n	800298c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3361      	adds	r3, #97	; 0x61
 8002986:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002988:	2b08      	cmp	r3, #8
 800298a:	d14f      	bne.n	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	335c      	adds	r3, #92	; 0x5c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	202c      	movs	r0, #44	; 0x2c
 80029a4:	fb00 f303 	mul.w	r3, r0, r3
 80029a8:	440b      	add	r3, r1
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	335c      	adds	r3, #92	; 0x5c
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d912      	bls.n	80029e8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	335c      	adds	r3, #92	; 0x5c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3360      	adds	r3, #96	; 0x60
 80029e2:	2204      	movs	r2, #4
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e021      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	2202      	movs	r2, #2
 80029f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a10:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a18:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	b2d9      	uxtb	r1, r3
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	202c      	movs	r0, #44	; 0x2c
 8002a48:	fb00 f303 	mul.w	r3, r0, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3360      	adds	r3, #96	; 0x60
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f004 fb8d 	bl	8007174 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a5a:	bf00      	nop
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08a      	sub	sp, #40	; 0x28
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	0c5b      	lsrs	r3, r3, #17
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a96:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d004      	beq.n	8002aa8 <HCD_RXQLVL_IRQHandler+0x46>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	f000 80a9 	beq.w	8002bf8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002aa6:	e0aa      	b.n	8002bfe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a6 	beq.w	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3344      	adds	r3, #68	; 0x44
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 809b 	beq.w	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3350      	adds	r3, #80	; 0x50
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	441a      	add	r2, r3
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	202c      	movs	r0, #44	; 0x2c
 8002ae0:	fb00 f303 	mul.w	r3, r0, r3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334c      	adds	r3, #76	; 0x4c
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d87a      	bhi.n	8002be4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3344      	adds	r3, #68	; 0x44
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	b292      	uxth	r2, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f001 fbe8 	bl	80042dc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3344      	adds	r3, #68	; 0x44
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	441a      	add	r2, r3
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	202c      	movs	r0, #44	; 0x2c
 8002b26:	fb00 f303 	mul.w	r3, r0, r3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3344      	adds	r3, #68	; 0x44
 8002b2e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3350      	adds	r3, #80	; 0x50
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	441a      	add	r2, r3
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	202c      	movs	r0, #44	; 0x2c
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	440b      	add	r3, r1
 8002b50:	3350      	adds	r3, #80	; 0x50
 8002b52:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	0cdb      	lsrs	r3, r3, #19
 8002b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b68:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3340      	adds	r3, #64	; 0x40
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d13c      	bne.n	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d039      	beq.n	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b9e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3354      	adds	r3, #84	; 0x54
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2d8      	uxtb	r0, r3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3354      	adds	r3, #84	; 0x54
 8002bde:	4602      	mov	r2, r0
 8002be0:	701a      	strb	r2, [r3, #0]
      break;
 8002be2:	e00b      	b.n	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3360      	adds	r3, #96	; 0x60
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	701a      	strb	r2, [r3, #0]
      break;
 8002bf6:	e001      	b.n	8002bfc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002bf8:	bf00      	nop
 8002bfa:	e000      	b.n	8002bfe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bfc:	bf00      	nop
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d10b      	bne.n	8002c56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d102      	bne.n	8002c4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f004 fa77 	bl	800713c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d132      	bne.n	8002cc6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d126      	bne.n	8002cc0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d113      	bne.n	8002ca2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c84:	d106      	bne.n	8002c94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 fc93 	bl	80045b8 <USB_InitFSLSPClkSel>
 8002c92:	e011      	b.n	8002cb8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 fc8c 	bl	80045b8 <USB_InitFSLSPClkSel>
 8002ca0:	e00a      	b.n	8002cb8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d106      	bne.n	8002cb8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cb6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f004 fa69 	bl	8007190 <HAL_HCD_PortEnabled_Callback>
 8002cbe:	e002      	b.n	8002cc6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f004 fa73 	bl	80071ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d103      	bne.n	8002cd8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f043 0320 	orr.w	r3, r3, #32
 8002cd6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6013      	str	r3, [r2, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e12b      	b.n	8002f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd ff0a 	bl	8000b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2224      	movs	r2, #36	; 0x24
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d50:	f000 fd80 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8002d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a81      	ldr	r2, [pc, #516]	; (8002f60 <HAL_I2C_Init+0x274>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d807      	bhi.n	8002d70 <HAL_I2C_Init+0x84>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a80      	ldr	r2, [pc, #512]	; (8002f64 <HAL_I2C_Init+0x278>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e006      	b.n	8002d7e <HAL_I2C_Init+0x92>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a7d      	ldr	r2, [pc, #500]	; (8002f68 <HAL_I2C_Init+0x27c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	bf94      	ite	ls
 8002d78:	2301      	movls	r3, #1
 8002d7a:	2300      	movhi	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0e7      	b.n	8002f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a78      	ldr	r2, [pc, #480]	; (8002f6c <HAL_I2C_Init+0x280>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0c9b      	lsrs	r3, r3, #18
 8002d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a6a      	ldr	r2, [pc, #424]	; (8002f60 <HAL_I2C_Init+0x274>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d802      	bhi.n	8002dc0 <HAL_I2C_Init+0xd4>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	e009      	b.n	8002dd4 <HAL_I2C_Init+0xe8>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	4a69      	ldr	r2, [pc, #420]	; (8002f70 <HAL_I2C_Init+0x284>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002de6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	495c      	ldr	r1, [pc, #368]	; (8002f60 <HAL_I2C_Init+0x274>)
 8002df0:	428b      	cmp	r3, r1
 8002df2:	d819      	bhi.n	8002e28 <HAL_I2C_Init+0x13c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e59      	subs	r1, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e02:	1c59      	adds	r1, r3, #1
 8002e04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e08:	400b      	ands	r3, r1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_I2C_Init+0x138>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e59      	subs	r1, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e22:	e051      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002e24:	2304      	movs	r3, #4
 8002e26:	e04f      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d111      	bne.n	8002e54 <HAL_I2C_Init+0x168>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e012      	b.n	8002e7a <HAL_I2C_Init+0x18e>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	0099      	lsls	r1, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Init+0x196>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e022      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10e      	bne.n	8002ea8 <HAL_I2C_Init+0x1bc>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1e58      	subs	r0, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	440b      	add	r3, r1
 8002e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	e00f      	b.n	8002ec8 <HAL_I2C_Init+0x1dc>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	6809      	ldr	r1, [r1, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6911      	ldr	r1, [r2, #16]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68d2      	ldr	r2, [r2, #12]
 8002f02:	4311      	orrs	r1, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	000186a0 	.word	0x000186a0
 8002f64:	001e847f 	.word	0x001e847f
 8002f68:	003d08ff 	.word	0x003d08ff
 8002f6c:	431bde83 	.word	0x431bde83
 8002f70:	10624dd3 	.word	0x10624dd3

08002f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e267      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d075      	beq.n	800307e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f92:	4b88      	ldr	r3, [pc, #544]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9e:	4b85      	ldr	r3, [pc, #532]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d112      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002faa:	4b82      	ldr	r3, [pc, #520]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	4b7e      	ldr	r3, [pc, #504]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d05b      	beq.n	800307c <HAL_RCC_OscConfig+0x108>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d157      	bne.n	800307c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e242      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x74>
 8002fda:	4b76      	ldr	r3, [pc, #472]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a75      	ldr	r2, [pc, #468]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e01d      	b.n	8003024 <HAL_RCC_OscConfig+0xb0>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x98>
 8002ff2:	4b70      	ldr	r3, [pc, #448]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6f      	ldr	r2, [pc, #444]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b6d      	ldr	r3, [pc, #436]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a6c      	ldr	r2, [pc, #432]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0xb0>
 800300c:	4b69      	ldr	r3, [pc, #420]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a68      	ldr	r2, [pc, #416]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b66      	ldr	r3, [pc, #408]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a65      	ldr	r2, [pc, #404]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fd ff44 	bl	8000eb8 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003034:	f7fd ff40 	bl	8000eb8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e207      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b5b      	ldr	r3, [pc, #364]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0xc0>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fd ff30 	bl	8000eb8 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305c:	f7fd ff2c 	bl	8000eb8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1f3      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	4b51      	ldr	r3, [pc, #324]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0xe8>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d063      	beq.n	8003152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800308a:	4b4a      	ldr	r3, [pc, #296]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003096:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d11c      	bne.n	80030dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a2:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d116      	bne.n	80030dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_RCC_OscConfig+0x152>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e1c7      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c6:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4937      	ldr	r1, [pc, #220]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030da:	e03a      	b.n	8003152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d020      	beq.n	8003126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e4:	4b34      	ldr	r3, [pc, #208]	; (80031b8 <HAL_RCC_OscConfig+0x244>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fd fee5 	bl	8000eb8 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f2:	f7fd fee1 	bl	8000eb8 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1a8      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003110:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4925      	ldr	r1, [pc, #148]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]
 8003124:	e015      	b.n	8003152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003126:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_OscConfig+0x244>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fd fec4 	bl	8000eb8 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003134:	f7fd fec0 	bl	8000eb8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e187      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d036      	beq.n	80031cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <HAL_RCC_OscConfig+0x248>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fd fea4 	bl	8000eb8 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003174:	f7fd fea0 	bl	8000eb8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e167      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x200>
 8003192:	e01b      	b.n	80031cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_OscConfig+0x248>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fd fe8d 	bl	8000eb8 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a0:	e00e      	b.n	80031c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a2:	f7fd fe89 	bl	8000eb8 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d907      	bls.n	80031c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e150      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
 80031b4:	40023800 	.word	0x40023800
 80031b8:	42470000 	.word	0x42470000
 80031bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	4b88      	ldr	r3, [pc, #544]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ea      	bne.n	80031a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8097 	beq.w	8003308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031de:	4b81      	ldr	r3, [pc, #516]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10f      	bne.n	800320a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b7d      	ldr	r3, [pc, #500]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a7c      	ldr	r2, [pc, #496]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b7a      	ldr	r3, [pc, #488]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x474>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d118      	bne.n	8003248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003216:	4b74      	ldr	r3, [pc, #464]	; (80033e8 <HAL_RCC_OscConfig+0x474>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a73      	ldr	r2, [pc, #460]	; (80033e8 <HAL_RCC_OscConfig+0x474>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fd fe49 	bl	8000eb8 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322a:	f7fd fe45 	bl	8000eb8 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e10c      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <HAL_RCC_OscConfig+0x474>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x2ea>
 8003250:	4b64      	ldr	r3, [pc, #400]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a63      	ldr	r2, [pc, #396]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	e01c      	b.n	8003298 <HAL_RCC_OscConfig+0x324>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b05      	cmp	r3, #5
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x30c>
 8003266:	4b5f      	ldr	r3, [pc, #380]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a5e      	ldr	r2, [pc, #376]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	6713      	str	r3, [r2, #112]	; 0x70
 8003272:	4b5c      	ldr	r3, [pc, #368]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	4a5b      	ldr	r2, [pc, #364]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6713      	str	r3, [r2, #112]	; 0x70
 800327e:	e00b      	b.n	8003298 <HAL_RCC_OscConfig+0x324>
 8003280:	4b58      	ldr	r3, [pc, #352]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a57      	ldr	r2, [pc, #348]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
 800328c:	4b55      	ldr	r3, [pc, #340]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	4a54      	ldr	r2, [pc, #336]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003292:	f023 0304 	bic.w	r3, r3, #4
 8003296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d015      	beq.n	80032cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fd fe0a 	bl	8000eb8 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a6:	e00a      	b.n	80032be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fd fe06 	bl	8000eb8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e0cb      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ee      	beq.n	80032a8 <HAL_RCC_OscConfig+0x334>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032cc:	f7fd fdf4 	bl	8000eb8 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d4:	f7fd fdf0 	bl	8000eb8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e0b5      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ea:	4b3e      	ldr	r3, [pc, #248]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1ee      	bne.n	80032d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fc:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4a38      	ldr	r2, [pc, #224]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a1 	beq.w	8003454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003312:	4b34      	ldr	r3, [pc, #208]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d05c      	beq.n	80033d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d141      	bne.n	80033aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_RCC_OscConfig+0x478>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fd fdc4 	bl	8000eb8 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fd fdc0 	bl	8000eb8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e087      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	019b      	lsls	r3, r3, #6
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	3b01      	subs	r3, #1
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	491b      	ldr	r1, [pc, #108]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x478>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fd fd99 	bl	8000eb8 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338a:	f7fd fd95 	bl	8000eb8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e05c      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x416>
 80033a8:	e054      	b.n	8003454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_RCC_OscConfig+0x478>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fd fd82 	bl	8000eb8 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fd fd7e 	bl	8000eb8 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e045      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCC_OscConfig+0x470>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x444>
 80033d6:	e03d      	b.n	8003454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e038      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40007000 	.word	0x40007000
 80033ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033f0:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x4ec>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d028      	beq.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d121      	bne.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d11a      	bne.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003420:	4013      	ands	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003428:	4293      	cmp	r3, r2
 800342a:	d111      	bne.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	3b01      	subs	r3, #1
 800343a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d107      	bne.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800

08003464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0cc      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003478:	4b68      	ldr	r3, [pc, #416]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d90c      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b65      	ldr	r3, [pc, #404]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a58      	ldr	r2, [pc, #352]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	494d      	ldr	r1, [pc, #308]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d044      	beq.n	8003584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d119      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d003      	beq.n	8003522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351e:	2b03      	cmp	r3, #3
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003522:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e06f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003532:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e067      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003542:	4b37      	ldr	r3, [pc, #220]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f023 0203 	bic.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4934      	ldr	r1, [pc, #208]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	4313      	orrs	r3, r2
 8003552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003554:	f7fd fcb0 	bl	8000eb8 <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	e00a      	b.n	8003572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355c:	f7fd fcac 	bl	8000eb8 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e04f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 020c 	and.w	r2, r3, #12
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	429a      	cmp	r2, r3
 8003582:	d1eb      	bne.n	800355c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d20c      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4916      	ldr	r1, [pc, #88]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	490e      	ldr	r1, [pc, #56]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ea:	f000 f821 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	490a      	ldr	r1, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	5ccb      	ldrb	r3, [r1, r3]
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fc10 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023c00 	.word	0x40023c00
 8003620:	40023800 	.word	0x40023800
 8003624:	0800784c 	.word	0x0800784c
 8003628:	20000000 	.word	0x20000000
 800362c:	20000004 	.word	0x20000004

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b094      	sub	sp, #80	; 0x50
 8003636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
 800363c:	2300      	movs	r3, #0
 800363e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003640:	2300      	movs	r3, #0
 8003642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003648:	4b79      	ldr	r3, [pc, #484]	; (8003830 <HAL_RCC_GetSysClockFreq+0x200>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	d00d      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x40>
 8003654:	2b08      	cmp	r3, #8
 8003656:	f200 80e1 	bhi.w	800381c <HAL_RCC_GetSysClockFreq+0x1ec>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x34>
 800365e:	2b04      	cmp	r3, #4
 8003660:	d003      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x3a>
 8003662:	e0db      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b73      	ldr	r3, [pc, #460]	; (8003834 <HAL_RCC_GetSysClockFreq+0x204>)
 8003666:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003668:	e0db      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800366a:	4b73      	ldr	r3, [pc, #460]	; (8003838 <HAL_RCC_GetSysClockFreq+0x208>)
 800366c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800366e:	e0d8      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003670:	4b6f      	ldr	r3, [pc, #444]	; (8003830 <HAL_RCC_GetSysClockFreq+0x200>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800367a:	4b6d      	ldr	r3, [pc, #436]	; (8003830 <HAL_RCC_GetSysClockFreq+0x200>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d063      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCC_GetSysClockFreq+0x200>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	2200      	movs	r2, #0
 800368e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
 800369a:	2300      	movs	r3, #0
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
 800369e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036a2:	4622      	mov	r2, r4
 80036a4:	462b      	mov	r3, r5
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b4:	0150      	lsls	r0, r2, #5
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4621      	mov	r1, r4
 80036bc:	1a51      	subs	r1, r2, r1
 80036be:	6139      	str	r1, [r7, #16]
 80036c0:	4629      	mov	r1, r5
 80036c2:	eb63 0301 	sbc.w	r3, r3, r1
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036d4:	4659      	mov	r1, fp
 80036d6:	018b      	lsls	r3, r1, #6
 80036d8:	4651      	mov	r1, sl
 80036da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036de:	4651      	mov	r1, sl
 80036e0:	018a      	lsls	r2, r1, #6
 80036e2:	4651      	mov	r1, sl
 80036e4:	ebb2 0801 	subs.w	r8, r2, r1
 80036e8:	4659      	mov	r1, fp
 80036ea:	eb63 0901 	sbc.w	r9, r3, r1
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003702:	4690      	mov	r8, r2
 8003704:	4699      	mov	r9, r3
 8003706:	4623      	mov	r3, r4
 8003708:	eb18 0303 	adds.w	r3, r8, r3
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	462b      	mov	r3, r5
 8003710:	eb49 0303 	adc.w	r3, r9, r3
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003722:	4629      	mov	r1, r5
 8003724:	024b      	lsls	r3, r1, #9
 8003726:	4621      	mov	r1, r4
 8003728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800372c:	4621      	mov	r1, r4
 800372e:	024a      	lsls	r2, r1, #9
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003736:	2200      	movs	r2, #0
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
 800373a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800373c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003740:	f7fc fd42 	bl	80001c8 <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4613      	mov	r3, r2
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800374c:	e058      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374e:	4b38      	ldr	r3, [pc, #224]	; (8003830 <HAL_RCC_GetSysClockFreq+0x200>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	2200      	movs	r2, #0
 8003756:	4618      	mov	r0, r3
 8003758:	4611      	mov	r1, r2
 800375a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	2300      	movs	r3, #0
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
 8003764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	f04f 0000 	mov.w	r0, #0
 8003770:	f04f 0100 	mov.w	r1, #0
 8003774:	0159      	lsls	r1, r3, #5
 8003776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800377a:	0150      	lsls	r0, r2, #5
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4641      	mov	r1, r8
 8003782:	ebb2 0a01 	subs.w	sl, r2, r1
 8003786:	4649      	mov	r1, r9
 8003788:	eb63 0b01 	sbc.w	fp, r3, r1
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800379c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037a0:	ebb2 040a 	subs.w	r4, r2, sl
 80037a4:	eb63 050b 	sbc.w	r5, r3, fp
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	00eb      	lsls	r3, r5, #3
 80037b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b6:	00e2      	lsls	r2, r4, #3
 80037b8:	4614      	mov	r4, r2
 80037ba:	461d      	mov	r5, r3
 80037bc:	4643      	mov	r3, r8
 80037be:	18e3      	adds	r3, r4, r3
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	464b      	mov	r3, r9
 80037c4:	eb45 0303 	adc.w	r3, r5, r3
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037d6:	4629      	mov	r1, r5
 80037d8:	028b      	lsls	r3, r1, #10
 80037da:	4621      	mov	r1, r4
 80037dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e0:	4621      	mov	r1, r4
 80037e2:	028a      	lsls	r2, r1, #10
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ea:	2200      	movs	r2, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	61fa      	str	r2, [r7, #28]
 80037f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f4:	f7fc fce8 	bl	80001c8 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4613      	mov	r3, r2
 80037fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_GetSysClockFreq+0x200>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800381a:	e002      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetSysClockFreq+0x204>)
 800381e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003824:	4618      	mov	r0, r3
 8003826:	3750      	adds	r7, #80	; 0x50
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	00f42400 	.word	0x00f42400
 8003838:	007a1200 	.word	0x007a1200

0800383c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_RCC_GetHCLKFreq+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000000 	.word	0x20000000

08003854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003858:	f7ff fff0 	bl	800383c <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0a9b      	lsrs	r3, r3, #10
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	0800785c 	.word	0x0800785c

0800387c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07b      	b.n	8003986 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389e:	d009      	beq.n	80038b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	61da      	str	r2, [r3, #28]
 80038a6:	e005      	b.n	80038b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd f974 	bl	8000bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	ea42 0103 	orr.w	r1, r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0104 	and.w	r1, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f003 0210 	and.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003974:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e041      	b.n	8003a24 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fd f949 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f000 f95d 	bl	8003c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d001      	beq.n	8003a44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e046      	b.n	8003ad2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a23      	ldr	r2, [pc, #140]	; (8003ae0 <HAL_TIM_Base_Start+0xb4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d022      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5e:	d01d      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_TIM_Base_Start+0xb8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d018      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_TIM_Base_Start+0xbc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <HAL_TIM_Base_Start+0xc0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <HAL_TIM_Base_Start+0xc4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_TIM_Base_Start+0xc8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_TIM_Base_Start+0x70>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_TIM_Base_Start+0xcc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d010      	beq.n	8003ad0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	e007      	b.n	8003ad0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40001800 	.word	0x40001800

08003afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_TIM_ConfigClockSource+0x1c>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e0b4      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x186>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b50:	d03e      	beq.n	8003bd0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b56:	f200 8087 	bhi.w	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	f000 8086 	beq.w	8003c6e <HAL_TIM_ConfigClockSource+0x172>
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d87f      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b70      	cmp	r3, #112	; 0x70
 8003b6a:	d01a      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0xa6>
 8003b6c:	2b70      	cmp	r3, #112	; 0x70
 8003b6e:	d87b      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b60      	cmp	r3, #96	; 0x60
 8003b72:	d050      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x11a>
 8003b74:	2b60      	cmp	r3, #96	; 0x60
 8003b76:	d877      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b50      	cmp	r3, #80	; 0x50
 8003b7a:	d03c      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b7c:	2b50      	cmp	r3, #80	; 0x50
 8003b7e:	d873      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d058      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x13a>
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d86f      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b30      	cmp	r3, #48	; 0x30
 8003b8a:	d064      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	2b30      	cmp	r3, #48	; 0x30
 8003b8e:	d86b      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d060      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x15a>
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d867      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d05c      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x15a>
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d05a      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x15a>
 8003ba0:	e062      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6899      	ldr	r1, [r3, #8]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f000 f985 	bl	8003ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	609a      	str	r2, [r3, #8]
      break;
 8003bce:	e04f      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6899      	ldr	r1, [r3, #8]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f000 f96e 	bl	8003ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bf2:	609a      	str	r2, [r3, #8]
      break;
 8003bf4:	e03c      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f000 f8e2 	bl	8003dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2150      	movs	r1, #80	; 0x50
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f93b 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003c14:	e02c      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f000 f901 	bl	8003e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2160      	movs	r1, #96	; 0x60
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f92b 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003c34:	e01c      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f000 f8c2 	bl	8003dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f91b 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003c54:	e00c      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f000 f912 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003c66:	e003      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c6c:	e000      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <TIM_Base_SetConfig+0x114>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d00f      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3d      	ldr	r2, [pc, #244]	; (8003da4 <TIM_Base_SetConfig+0x118>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3c      	ldr	r2, [pc, #240]	; (8003da8 <TIM_Base_SetConfig+0x11c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a3b      	ldr	r2, [pc, #236]	; (8003dac <TIM_Base_SetConfig+0x120>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a3a      	ldr	r2, [pc, #232]	; (8003db0 <TIM_Base_SetConfig+0x124>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d108      	bne.n	8003cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <TIM_Base_SetConfig+0x114>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d02b      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d027      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <TIM_Base_SetConfig+0x118>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d023      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2b      	ldr	r2, [pc, #172]	; (8003da8 <TIM_Base_SetConfig+0x11c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2a      	ldr	r2, [pc, #168]	; (8003dac <TIM_Base_SetConfig+0x120>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01b      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <TIM_Base_SetConfig+0x124>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d017      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <TIM_Base_SetConfig+0x128>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a27      	ldr	r2, [pc, #156]	; (8003db8 <TIM_Base_SetConfig+0x12c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00f      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <TIM_Base_SetConfig+0x130>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a25      	ldr	r2, [pc, #148]	; (8003dc0 <TIM_Base_SetConfig+0x134>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <TIM_Base_SetConfig+0x138>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a23      	ldr	r2, [pc, #140]	; (8003dc8 <TIM_Base_SetConfig+0x13c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d108      	bne.n	8003d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <TIM_Base_SetConfig+0x114>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_Base_SetConfig+0xf8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a0c      	ldr	r2, [pc, #48]	; (8003db0 <TIM_Base_SetConfig+0x124>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d103      	bne.n	8003d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	615a      	str	r2, [r3, #20]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800
 8003dac:	40000c00 	.word	0x40000c00
 8003db0:	40010400 	.word	0x40010400
 8003db4:	40014000 	.word	0x40014000
 8003db8:	40014400 	.word	0x40014400
 8003dbc:	40014800 	.word	0x40014800
 8003dc0:	40001800 	.word	0x40001800
 8003dc4:	40001c00 	.word	0x40001c00
 8003dc8:	40002000 	.word	0x40002000

08003dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0201 	bic.w	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 030a 	bic.w	r3, r3, #10
 8003e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0210 	bic.w	r2, r3, #16
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	031b      	lsls	r3, r3, #12
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f043 0307 	orr.w	r3, r3, #7
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e05a      	b.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d01d      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1a      	ldr	r2, [pc, #104]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a18      	ldr	r2, [pc, #96]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10c      	bne.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40001800 	.word	0x40001800

08003ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	f107 001c 	add.w	r0, r7, #28
 8004006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	2b01      	cmp	r3, #1
 800400e:	d122      	bne.n	8004056 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9c0 	bl	80043d0 <USB_CoreReset>
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	e01a      	b.n	800408c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9b4 	bl	80043d0 <USB_CoreReset>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800406c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
 800407e:	e005      	b.n	800408c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10b      	bne.n	80040aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f043 0206 	orr.w	r2, r3, #6
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040b6:	b004      	add	sp, #16
 80040b8:	4770      	bx	lr

080040ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 0201 	bic.w	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	460b      	mov	r3, r1
 8004108:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d115      	bne.n	800414c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800412c:	2001      	movs	r0, #1
 800412e:	f7fc fecf 	bl	8000ed0 <HAL_Delay>
      ms++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3301      	adds	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f93a 	bl	80043b2 <USB_GetMode>
 800413e:	4603      	mov	r3, r0
 8004140:	2b01      	cmp	r3, #1
 8004142:	d01e      	beq.n	8004182 <USB_SetCurrentMode+0x84>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b31      	cmp	r3, #49	; 0x31
 8004148:	d9f0      	bls.n	800412c <USB_SetCurrentMode+0x2e>
 800414a:	e01a      	b.n	8004182 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d115      	bne.n	800417e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800415e:	2001      	movs	r0, #1
 8004160:	f7fc feb6 	bl	8000ed0 <HAL_Delay>
      ms++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3301      	adds	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f921 	bl	80043b2 <USB_GetMode>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <USB_SetCurrentMode+0x84>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b31      	cmp	r3, #49	; 0x31
 800417a:	d9f0      	bls.n	800415e <USB_SetCurrentMode+0x60>
 800417c:	e001      	b.n	8004182 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e005      	b.n	800418e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b32      	cmp	r3, #50	; 0x32
 8004186:	d101      	bne.n	800418c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a13      	ldr	r2, [pc, #76]	; (80041fc <USB_FlushTxFifo+0x64>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e01b      	b.n	80041f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	daf2      	bge.n	80041a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	019b      	lsls	r3, r3, #6
 80041c8:	f043 0220 	orr.w	r2, r3, #32
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3301      	adds	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a08      	ldr	r2, [pc, #32]	; (80041fc <USB_FlushTxFifo+0x64>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e006      	b.n	80041f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d0f0      	beq.n	80041d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	00030d40 	.word	0x00030d40

08004200 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <USB_FlushRxFifo+0x5c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e018      	b.n	8004250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	daf2      	bge.n	800420c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2210      	movs	r2, #16
 800422e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a08      	ldr	r2, [pc, #32]	; (800425c <USB_FlushRxFifo+0x5c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e006      	b.n	8004250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b10      	cmp	r3, #16
 800424c:	d0f0      	beq.n	8004230 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	00030d40 	.word	0x00030d40

08004260 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	; 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	4611      	mov	r1, r2
 800426c:	461a      	mov	r2, r3
 800426e:	460b      	mov	r3, r1
 8004270:	71fb      	strb	r3, [r7, #7]
 8004272:	4613      	mov	r3, r2
 8004274:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800427e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004282:	2b00      	cmp	r3, #0
 8004284:	d123      	bne.n	80042ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004286:	88bb      	ldrh	r3, [r7, #4]
 8004288:	3303      	adds	r3, #3
 800428a:	089b      	lsrs	r3, r3, #2
 800428c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e018      	b.n	80042c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	031a      	lsls	r2, r3, #12
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
 800429c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a0:	461a      	mov	r2, r3
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3301      	adds	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3301      	adds	r3, #1
 80042b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	3301      	adds	r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3301      	adds	r3, #1
 80042be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	3301      	adds	r3, #1
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d3e2      	bcc.n	8004294 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3724      	adds	r7, #36	; 0x24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80042dc:	b480      	push	{r7}
 80042de:	b08b      	sub	sp, #44	; 0x2c
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004302:	2300      	movs	r3, #0
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	e014      	b.n	8004332 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	601a      	str	r2, [r3, #0]
    pDest++;
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	3301      	adds	r3, #1
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	3301      	adds	r3, #1
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	3301      	adds	r3, #1
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	3301      	adds	r3, #1
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	3301      	adds	r3, #1
 8004330:	623b      	str	r3, [r7, #32]
 8004332:	6a3a      	ldr	r2, [r7, #32]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	429a      	cmp	r2, r3
 8004338:	d3e6      	bcc.n	8004308 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800433a:	8bfb      	ldrh	r3, [r7, #30]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01e      	beq.n	800437e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434a:	461a      	mov	r2, r3
 800434c:	f107 0310 	add.w	r3, r7, #16
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	b2da      	uxtb	r2, r3
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	701a      	strb	r2, [r3, #0]
      i++;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	3301      	adds	r3, #1
 800436a:	623b      	str	r3, [r7, #32]
      pDest++;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	3301      	adds	r3, #1
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004372:	8bfb      	ldrh	r3, [r7, #30]
 8004374:	3b01      	subs	r3, #1
 8004376:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004378:	8bfb      	ldrh	r3, [r7, #30]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ea      	bne.n	8004354 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004380:	4618      	mov	r0, r3
 8004382:	372c      	adds	r7, #44	; 0x2c
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80043a4:	68fb      	ldr	r3, [r7, #12]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0301 	and.w	r3, r3, #1
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3301      	adds	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a13      	ldr	r2, [pc, #76]	; (8004434 <USB_CoreReset+0x64>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e01b      	b.n	8004426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	daf2      	bge.n	80043dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3301      	adds	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <USB_CoreReset+0x64>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d0f0      	beq.n	8004406 <USB_CoreReset+0x36>

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	00030d40 	.word	0x00030d40

08004438 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004438:	b084      	sub	sp, #16
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004458:	461a      	mov	r2, r3
 800445a:	2300      	movs	r3, #0
 800445c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d018      	beq.n	80044c0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10a      	bne.n	80044aa <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044a2:	f043 0304 	orr.w	r3, r3, #4
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e014      	b.n	80044d4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e009      	b.n	80044d4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ce:	f023 0304 	bic.w	r3, r3, #4
 80044d2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044d4:	2110      	movs	r1, #16
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fe5e 	bl	8004198 <USB_FlushTxFifo>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff fe8a 	bl	8004200 <USB_FlushRxFifo>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e015      	b.n	8004528 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004508:	461a      	mov	r2, r3
 800450a:	f04f 33ff 	mov.w	r3, #4294967295
 800450e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	461a      	mov	r2, r3
 800451e:	2300      	movs	r3, #0
 8004520:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	3301      	adds	r3, #1
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	429a      	cmp	r2, r3
 800452e:	d3e5      	bcc.n	80044fc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f04f 32ff 	mov.w	r2, #4294967295
 800453c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00b      	beq.n	8004562 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004550:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <USB_HostInit+0x16c>)
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <USB_HostInit+0x170>)
 800455c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004560:	e009      	b.n	8004576 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2280      	movs	r2, #128	; 0x80
 8004566:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a10      	ldr	r2, [pc, #64]	; (80045ac <USB_HostInit+0x174>)
 800456c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a0f      	ldr	r2, [pc, #60]	; (80045b0 <USB_HostInit+0x178>)
 8004572:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	2b00      	cmp	r3, #0
 800457a:	d105      	bne.n	8004588 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f043 0210 	orr.w	r2, r3, #16
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699a      	ldr	r2, [r3, #24]
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <USB_HostInit+0x17c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a0:	b004      	add	sp, #16
 80045a2:	4770      	bx	lr
 80045a4:	01000200 	.word	0x01000200
 80045a8:	00e00300 	.word	0x00e00300
 80045ac:	00600080 	.word	0x00600080
 80045b0:	004000e0 	.word	0x004000e0
 80045b4:	a3200008 	.word	0xa3200008

080045b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80045f0:	4313      	orrs	r3, r2
 80045f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004600:	461a      	mov	r2, r3
 8004602:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004606:	6053      	str	r3, [r2, #4]
 8004608:	e009      	b.n	800461e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d106      	bne.n	800461e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004616:	461a      	mov	r2, r3
 8004618:	f241 7370 	movw	r3, #6000	; 0x1770
 800461c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800464c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800465c:	2064      	movs	r0, #100	; 0x64
 800465e:	f7fc fc37 	bl	8000ed0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800466a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800466e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004670:	200a      	movs	r0, #10
 8004672:	f7fc fc2d 	bl	8000ed0 <HAL_Delay>

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80046a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <USB_DriveVbus+0x44>
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d106      	bne.n	80046c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80046be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	d109      	bne.n	80046e4 <USB_DriveVbus+0x64>
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80046de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	0c5b      	lsrs	r3, r3, #17
 8004710:	f003 0303 	and.w	r3, r3, #3
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	b29b      	uxth	r3, r3
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	4603      	mov	r3, r0
 8004754:	70fb      	strb	r3, [r7, #3]
 8004756:	460b      	mov	r3, r1
 8004758:	70bb      	strb	r3, [r7, #2]
 800475a:	4613      	mov	r3, r2
 800475c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
 8004778:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800477a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800477e:	2b03      	cmp	r3, #3
 8004780:	d87e      	bhi.n	8004880 <USB_HC_Init+0x13c>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <USB_HC_Init+0x44>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	08004799 	.word	0x08004799
 800478c:	08004843 	.word	0x08004843
 8004790:	08004799 	.word	0x08004799
 8004794:	08004805 	.word	0x08004805
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a4:	461a      	mov	r2, r3
 80047a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80047aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80047ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	da10      	bge.n	80047d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80047d4:	e057      	b.n	8004886 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d051      	beq.n	8004886 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004800:	60d3      	str	r3, [r2, #12]
      break;
 8004802:	e040      	b.n	8004886 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004810:	461a      	mov	r2, r3
 8004812:	f240 639d 	movw	r3, #1693	; 0x69d
 8004816:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004818:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800481c:	2b00      	cmp	r3, #0
 800481e:	da34      	bge.n	800488a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	440a      	add	r2, r1
 8004836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800483a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004840:	e023      	b.n	800488a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	461a      	mov	r2, r3
 8004850:	f240 2325 	movw	r3, #549	; 0x225
 8004854:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004856:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800485a:	2b00      	cmp	r3, #0
 800485c:	da17      	bge.n	800488e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	440a      	add	r2, r1
 8004874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004878:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800487c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800487e:	e006      	b.n	800488e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	77fb      	strb	r3, [r7, #31]
      break;
 8004884:	e004      	b.n	8004890 <USB_HC_Init+0x14c>
      break;
 8004886:	bf00      	nop
 8004888:	e002      	b.n	8004890 <USB_HC_Init+0x14c>
      break;
 800488a:	bf00      	nop
 800488c:	e000      	b.n	8004890 <USB_HC_Init+0x14c>
      break;
 800488e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048aa:	f043 0302 	orr.w	r3, r3, #2
 80048ae:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	2101      	movs	r1, #1
 80048c0:	fa01 f303 	lsl.w	r3, r1, r3
 80048c4:	6939      	ldr	r1, [r7, #16]
 80048c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80048ca:	4313      	orrs	r3, r2
 80048cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80048da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da03      	bge.n	80048ea <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80048e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e001      	b.n	80048ee <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff feff 	bl	80046f2 <USB_GetHostSpeed>
 80048f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80048f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d106      	bne.n	800490c <USB_HC_Init+0x1c8>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d003      	beq.n	800490c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e001      	b.n	8004910 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004910:	787b      	ldrb	r3, [r7, #1]
 8004912:	059b      	lsls	r3, r3, #22
 8004914:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004918:	78bb      	ldrb	r3, [r7, #2]
 800491a:	02db      	lsls	r3, r3, #11
 800491c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004920:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004922:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004926:	049b      	lsls	r3, r3, #18
 8004928:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800492c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800492e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004930:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004934:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	0159      	lsls	r1, r3, #5
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	440b      	add	r3, r1
 8004942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004946:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800494c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800494e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004952:	2b03      	cmp	r3, #3
 8004954:	d003      	beq.n	800495e <USB_HC_Init+0x21a>
 8004956:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800495a:	2b01      	cmp	r3, #1
 800495c:	d10f      	bne.n	800497e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4413      	add	r3, r2
 8004966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	440a      	add	r2, r1
 8004974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004978:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800497c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800497e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08c      	sub	sp, #48	; 0x30
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80049a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d02d      	beq.n	8004a0e <USB_HC_StartXfer+0x86>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	791b      	ldrb	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d129      	bne.n	8004a0e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d117      	bne.n	80049f0 <USB_HC_StartXfer+0x68>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	79db      	ldrb	r3, [r3, #7]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <USB_HC_StartXfer+0x48>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	79db      	ldrb	r3, [r3, #7]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d10f      	bne.n	80049f0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	0151      	lsls	r1, r2, #5
 80049e2:	6a3a      	ldr	r2, [r7, #32]
 80049e4:	440a      	add	r2, r1
 80049e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <USB_HC_StartXfer+0x86>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	795b      	ldrb	r3, [r3, #5]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d107      	bne.n	8004a0e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	4619      	mov	r1, r3
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 fa0f 	bl	8004e28 <USB_DoPing>
      return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e0f8      	b.n	8004c00 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d018      	beq.n	8004a48 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	8912      	ldrh	r2, [r2, #8]
 8004a1e:	4413      	add	r3, r2
 8004a20:	3b01      	subs	r3, #1
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	8912      	ldrh	r2, [r2, #8]
 8004a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a2a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004a2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004a2e:	8b7b      	ldrh	r3, [r7, #26]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d90b      	bls.n	8004a4c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004a34:	8b7b      	ldrh	r3, [r7, #26]
 8004a36:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	8912      	ldrh	r2, [r2, #8]
 8004a3e:	fb03 f202 	mul.w	r2, r3, r2
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	611a      	str	r2, [r3, #16]
 8004a46:	e001      	b.n	8004a4c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004a54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	8912      	ldrh	r2, [r2, #8]
 8004a5a:	fb03 f202 	mul.w	r2, r3, r2
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	611a      	str	r2, [r3, #16]
 8004a62:	e003      	b.n	8004a6c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a76:	04d9      	lsls	r1, r3, #19
 8004a78:	4b63      	ldr	r3, [pc, #396]	; (8004c08 <USB_HC_StartXfer+0x280>)
 8004a7a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a7c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	7a9b      	ldrb	r3, [r3, #10]
 8004a82:	075b      	lsls	r3, r3, #29
 8004a84:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a88:	69f9      	ldr	r1, [r7, #28]
 8004a8a:	0148      	lsls	r0, r1, #5
 8004a8c:	6a39      	ldr	r1, [r7, #32]
 8004a8e:	4401      	add	r1, r0
 8004a90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a94:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a96:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68d9      	ldr	r1, [r3, #12]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aae:	460a      	mov	r2, r1
 8004ab0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	0151      	lsls	r1, r2, #5
 8004adc:	6a3a      	ldr	r2, [r7, #32]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ae4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ae8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	7e7b      	ldrb	r3, [r7, #25]
 8004afa:	075b      	lsls	r3, r3, #29
 8004afc:	69f9      	ldr	r1, [r7, #28]
 8004afe:	0148      	lsls	r0, r1, #5
 8004b00:	6a39      	ldr	r1, [r7, #32]
 8004b02:	4401      	add	r1, r0
 8004b04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b22:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	78db      	ldrb	r3, [r3, #3]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e003      	b.n	8004b3e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b3c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b44:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b52:	461a      	mov	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e04e      	b.n	8004c00 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	78db      	ldrb	r3, [r3, #3]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d149      	bne.n	8004bfe <USB_HC_StartXfer+0x276>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d045      	beq.n	8004bfe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	79db      	ldrb	r3, [r3, #7]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d830      	bhi.n	8004bdc <USB_HC_StartXfer+0x254>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <USB_HC_StartXfer+0x1f8>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004bb5 	.word	0x08004bb5
 8004b88:	08004b91 	.word	0x08004b91
 8004b8c:	08004bb5 	.word	0x08004bb5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	3303      	adds	r3, #3
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004b9a:	8afa      	ldrh	r2, [r7, #22]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d91c      	bls.n	8004be0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8004bb2:	e015      	b.n	8004be0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	3303      	adds	r3, #3
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004bbe:	8afa      	ldrh	r2, [r7, #22]
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d90a      	bls.n	8004be4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8004bda:	e003      	b.n	8004be4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004bdc:	bf00      	nop
 8004bde:	e002      	b.n	8004be6 <USB_HC_StartXfer+0x25e>
        break;
 8004be0:	bf00      	nop
 8004be2:	e000      	b.n	8004be6 <USB_HC_StartXfer+0x25e>
        break;
 8004be4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	68d9      	ldr	r1, [r3, #12]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	785a      	ldrb	r2, [r3, #1]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	9000      	str	r0, [sp, #0]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff fb31 	bl	8004260 <USB_WritePacket>
  }

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3728      	adds	r7, #40	; 0x28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	1ff80000 	.word	0x1ff80000

08004c0c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	b29b      	uxth	r3, r3
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b089      	sub	sp, #36	; 0x24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0c9b      	lsrs	r3, r3, #18
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	0fdb      	lsrs	r3, r3, #31
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d104      	bne.n	8004c88 <USB_HC_Halt+0x5a>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e0c8      	b.n	8004e1a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <USB_HC_Halt+0x66>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d163      	bne.n	8004d5c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cb2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f040 80ab 	bne.w	8004e18 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d133      	bne.n	8004d36 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d0c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3301      	adds	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d1a:	d81d      	bhi.n	8004d58 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d32:	d0ec      	beq.n	8004d0e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004d34:	e070      	b.n	8004e18 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d54:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004d56:	e05f      	b.n	8004e18 <USB_HC_Halt+0x1ea>
            break;
 8004d58:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004d5a:	e05d      	b.n	8004e18 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d7a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d133      	bne.n	8004df4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004daa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dca:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dd8:	d81d      	bhi.n	8004e16 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df0:	d0ec      	beq.n	8004dcc <USB_HC_Halt+0x19e>
 8004df2:	e011      	b.n	8004e18 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	e000      	b.n	8004e18 <USB_HC_Halt+0x1ea>
          break;
 8004e16:	bf00      	nop
    }
  }

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	04da      	lsls	r2, r3, #19
 8004e44:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <USB_DoPing+0x74>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e58:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e70:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e78:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e86:	461a      	mov	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	1ff80000 	.word	0x1ff80000

08004ea0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff f911 	bl	80040dc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004eba:	2110      	movs	r1, #16
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff f96b 	bl	8004198 <USB_FlushTxFifo>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff f997 	bl	8004200 <USB_FlushRxFifo>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	e01f      	b.n	8004f22 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ef8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	461a      	mov	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b0f      	cmp	r3, #15
 8004f26:	d9dc      	bls.n	8004ee2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e034      	b.n	8004f98 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	461a      	mov	r2, r3
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f74:	d80c      	bhi.n	8004f90 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f8c:	d0ec      	beq.n	8004f68 <USB_StopHost+0xc8>
 8004f8e:	e000      	b.n	8004f92 <USB_StopHost+0xf2>
        break;
 8004f90:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	3301      	adds	r3, #1
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b0f      	cmp	r3, #15
 8004f9c:	d9c7      	bls.n	8004f2e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004faa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff f880 	bl	80040ba <USB_EnableGlobalInt>

  return ret;
 8004fba:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b089      	sub	sp, #36	; 0x24
 8004fc8:	af04      	add	r7, sp, #16
 8004fca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004fcc:	2301      	movs	r3, #1
 8004fce:	2202      	movs	r2, #2
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fc66 	bl	80058a4 <USBH_FindInterface>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2bff      	cmp	r3, #255	; 0xff
 8004fe0:	d002      	beq.n	8004fe8 <USBH_CDC_InterfaceInit+0x24>
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d901      	bls.n	8004fec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e13d      	b.n	8005268 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fc3b 	bl	800586c <USBH_SelectInterface>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004ffa:	7bbb      	ldrb	r3, [r7, #14]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005000:	2302      	movs	r3, #2
 8005002:	e131      	b.n	8005268 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800500a:	2050      	movs	r0, #80	; 0x50
 800500c:	f002 fafa 	bl	8007604 <malloc>
 8005010:	4603      	mov	r3, r0
 8005012:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005024:	2302      	movs	r3, #2
 8005026:	e11f      	b.n	8005268 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005028:	2250      	movs	r2, #80	; 0x50
 800502a:	2100      	movs	r1, #0
 800502c:	68b8      	ldr	r0, [r7, #8]
 800502e:	f002 faf9 	bl	8007624 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	211a      	movs	r1, #26
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	4413      	add	r3, r2
 800503e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	b25b      	sxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	da15      	bge.n	8005076 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	211a      	movs	r1, #26
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	4413      	add	r3, r2
 8005056:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800505a:	781a      	ldrb	r2, [r3, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	211a      	movs	r1, #26
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	4413      	add	r3, r2
 800506c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005070:	881a      	ldrh	r2, [r3, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 ff2c 	bl	8006eda <USBH_AllocPipe>
 8005082:	4603      	mov	r3, r0
 8005084:	461a      	mov	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	7819      	ldrb	r1, [r3, #0]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	7858      	ldrb	r0, [r3, #1]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	8952      	ldrh	r2, [r2, #10]
 80050a2:	9202      	str	r2, [sp, #8]
 80050a4:	2203      	movs	r2, #3
 80050a6:	9201      	str	r2, [sp, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	4623      	mov	r3, r4
 80050ac:	4602      	mov	r2, r0
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 fee4 	bl	8006e7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2200      	movs	r2, #0
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f002 f9f3 	bl	80074a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80050c2:	2300      	movs	r3, #0
 80050c4:	2200      	movs	r2, #0
 80050c6:	210a      	movs	r1, #10
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fbeb 	bl	80058a4 <USBH_FindInterface>
 80050ce:	4603      	mov	r3, r0
 80050d0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2bff      	cmp	r3, #255	; 0xff
 80050d6:	d002      	beq.n	80050de <USBH_CDC_InterfaceInit+0x11a>
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d901      	bls.n	80050e2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80050de:	2302      	movs	r3, #2
 80050e0:	e0c2      	b.n	8005268 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	211a      	movs	r1, #26
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	b25b      	sxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da16      	bge.n	8005128 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	211a      	movs	r1, #26
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	4413      	add	r3, r2
 8005106:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	211a      	movs	r1, #26
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005120:	881a      	ldrh	r2, [r3, #0]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	835a      	strh	r2, [r3, #26]
 8005126:	e015      	b.n	8005154 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	211a      	movs	r1, #26
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	4413      	add	r3, r2
 8005134:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	211a      	movs	r1, #26
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	4413      	add	r3, r2
 800514a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800514e:	881a      	ldrh	r2, [r3, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	211a      	movs	r1, #26
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	4413      	add	r3, r2
 8005160:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	b25b      	sxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	da16      	bge.n	800519a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	211a      	movs	r1, #26
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	4413      	add	r3, r2
 8005178:	f203 3356 	addw	r3, r3, #854	; 0x356
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	211a      	movs	r1, #26
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	4413      	add	r3, r2
 800518e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005192:	881a      	ldrh	r2, [r3, #0]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	835a      	strh	r2, [r3, #26]
 8005198:	e015      	b.n	80051c6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	211a      	movs	r1, #26
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	4413      	add	r3, r2
 80051a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	211a      	movs	r1, #26
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80051c0:	881a      	ldrh	r2, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	7b9b      	ldrb	r3, [r3, #14]
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 fe84 	bl	8006eda <USBH_AllocPipe>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	7bdb      	ldrb	r3, [r3, #15]
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 fe7a 	bl	8006eda <USBH_AllocPipe>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	7b59      	ldrb	r1, [r3, #13]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	7b98      	ldrb	r0, [r3, #14]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	8b12      	ldrh	r2, [r2, #24]
 8005206:	9202      	str	r2, [sp, #8]
 8005208:	2202      	movs	r2, #2
 800520a:	9201      	str	r2, [sp, #4]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	4623      	mov	r3, r4
 8005210:	4602      	mov	r2, r0
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f001 fe32 	bl	8006e7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	7b19      	ldrb	r1, [r3, #12]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	7bd8      	ldrb	r0, [r3, #15]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	8b52      	ldrh	r2, [r2, #26]
 8005230:	9202      	str	r2, [sp, #8]
 8005232:	2202      	movs	r2, #2
 8005234:	9201      	str	r2, [sp, #4]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4623      	mov	r3, r4
 800523a:	4602      	mov	r2, r0
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 fe1d 	bl	8006e7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	7b5b      	ldrb	r3, [r3, #13]
 800524e:	2200      	movs	r2, #0
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f002 f928 	bl	80074a8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	7b1b      	ldrb	r3, [r3, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f002 f921 	bl	80074a8 <USBH_LL_SetToggle>

  return USBH_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bd90      	pop	{r4, r7, pc}

08005270 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00e      	beq.n	80052a8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fe12 	bl	8006eba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fe3d 	bl	8006f1c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	7b1b      	ldrb	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00e      	beq.n	80052ce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	7b1b      	ldrb	r3, [r3, #12]
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 fdff 	bl	8006eba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	7b1b      	ldrb	r3, [r3, #12]
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 fe2a 	bl	8006f1c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	7b5b      	ldrb	r3, [r3, #13]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00e      	beq.n	80052f4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	7b5b      	ldrb	r3, [r3, #13]
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fdec 	bl	8006eba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	7b5b      	ldrb	r3, [r3, #13]
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f001 fe17 	bl	8006f1c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00b      	beq.n	8005318 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	4618      	mov	r0, r3
 800530a:	f002 f983 	bl	8007614 <free>
    phost->pActiveClass->pData = 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005314:	2200      	movs	r2, #0
 8005316:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3340      	adds	r3, #64	; 0x40
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8b1 	bl	80054a2 <GetLineCoding>
 8005340:	4603      	mov	r3, r0
 8005342:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005344:	7afb      	ldrb	r3, [r7, #11]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d105      	bne.n	8005356 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005350:	2102      	movs	r1, #2
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005356:	7afb      	ldrb	r3, [r7, #11]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005368:	2301      	movs	r3, #1
 800536a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005380:	2b04      	cmp	r3, #4
 8005382:	d877      	bhi.n	8005474 <USBH_CDC_Process+0x114>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <USBH_CDC_Process+0x2c>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	080053a1 	.word	0x080053a1
 8005390:	080053a7 	.word	0x080053a7
 8005394:	080053d7 	.word	0x080053d7
 8005398:	0800544b 	.word	0x0800544b
 800539c:	08005459 	.word	0x08005459
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
      break;
 80053a4:	e06d      	b.n	8005482 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f897 	bl	80054e0 <SetLineCoding>
 80053b2:	4603      	mov	r3, r0
 80053b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80053b6:	7bbb      	ldrb	r3, [r7, #14]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80053c4:	e058      	b.n	8005478 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80053c6:	7bbb      	ldrb	r3, [r7, #14]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d055      	beq.n	8005478 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2204      	movs	r2, #4
 80053d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80053d4:	e050      	b.n	8005478 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	3340      	adds	r3, #64	; 0x40
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f860 	bl	80054a2 <GetLineCoding>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d126      	bne.n	800543a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fe:	791b      	ldrb	r3, [r3, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d13b      	bne.n	800547c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005410:	429a      	cmp	r2, r3
 8005412:	d133      	bne.n	800547c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005420:	429a      	cmp	r2, r3
 8005422:	d12b      	bne.n	800547c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800542e:	429a      	cmp	r2, r3
 8005430:	d124      	bne.n	800547c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f958 	bl	80056e8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005438:	e020      	b.n	800547c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800543a:	7bbb      	ldrb	r3, [r7, #14]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d01d      	beq.n	800547c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2204      	movs	r2, #4
 8005444:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005448:	e018      	b.n	800547c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f867 	bl	800551e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8da 	bl	800560a <CDC_ProcessReception>
      break;
 8005456:	e014      	b.n	8005482 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 ffef 	bl	800643e <USBH_ClrFeature>
 8005460:	4603      	mov	r3, r0
 8005462:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005472:	e005      	b.n	8005480 <USBH_CDC_Process+0x120>

    default:
      break;
 8005474:	bf00      	nop
 8005476:	e004      	b.n	8005482 <USBH_CDC_Process+0x122>
      break;
 8005478:	bf00      	nop
 800547a:	e002      	b.n	8005482 <USBH_CDC_Process+0x122>
      break;
 800547c:	bf00      	nop
 800547e:	e000      	b.n	8005482 <USBH_CDC_Process+0x122>
      break;
 8005480:	bf00      	nop

  }

  return status;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	22a1      	movs	r2, #161	; 0xa1
 80054b0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2221      	movs	r2, #33	; 0x21
 80054b6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2207      	movs	r2, #7
 80054c8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2207      	movs	r2, #7
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 fa81 	bl	80069d8 <USBH_CtlReq>
 80054d6:	4603      	mov	r3, r0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2221      	movs	r2, #33	; 0x21
 80054ee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2207      	movs	r2, #7
 8005506:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2207      	movs	r2, #7
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fa62 	bl	80069d8 <USBH_CtlReq>
 8005514:	4603      	mov	r3, r0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af02      	add	r7, sp, #8
 8005524:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005530:	2300      	movs	r3, #0
 8005532:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800553a:	2b01      	cmp	r3, #1
 800553c:	d002      	beq.n	8005544 <CDC_ProcessTransmission+0x26>
 800553e:	2b02      	cmp	r3, #2
 8005540:	d023      	beq.n	800558a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005542:	e05e      	b.n	8005602 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	8b12      	ldrh	r2, [r2, #24]
 800554c:	4293      	cmp	r3, r2
 800554e:	d90b      	bls.n	8005568 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	69d9      	ldr	r1, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8b1a      	ldrh	r2, [r3, #24]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	7b5b      	ldrb	r3, [r3, #13]
 800555c:	2001      	movs	r0, #1
 800555e:	9000      	str	r0, [sp, #0]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f001 fc48 	bl	8006df6 <USBH_BulkSendData>
 8005566:	e00b      	b.n	8005580 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	7b5b      	ldrb	r3, [r3, #13]
 8005576:	2001      	movs	r0, #1
 8005578:	9000      	str	r0, [sp, #0]
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 fc3b 	bl	8006df6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005588:	e03b      	b.n	8005602 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	7b5b      	ldrb	r3, [r3, #13]
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 ff5f 	bl	8007454 <USBH_LL_GetURBState>
 8005596:	4603      	mov	r3, r0
 8005598:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d128      	bne.n	80055f2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	8b12      	ldrh	r2, [r2, #24]
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d90e      	bls.n	80055ca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	8b12      	ldrh	r2, [r2, #24]
 80055b4:	1a9a      	subs	r2, r3, r2
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	8b12      	ldrh	r2, [r2, #24]
 80055c2:	441a      	add	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	61da      	str	r2, [r3, #28]
 80055c8:	e002      	b.n	80055d0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80055e0:	e00e      	b.n	8005600 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f868 	bl	80056c0 <USBH_CDC_TransmitCallback>
      break;
 80055f0:	e006      	b.n	8005600 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80055f2:	7afb      	ldrb	r3, [r7, #11]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d103      	bne.n	8005600 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005600:	bf00      	nop
  }
}
 8005602:	bf00      	nop
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800561c:	2300      	movs	r3, #0
 800561e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005626:	2b03      	cmp	r3, #3
 8005628:	d002      	beq.n	8005630 <CDC_ProcessReception+0x26>
 800562a:	2b04      	cmp	r3, #4
 800562c:	d00e      	beq.n	800564c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800562e:	e043      	b.n	80056b8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	6a19      	ldr	r1, [r3, #32]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	8b5a      	ldrh	r2, [r3, #26]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	7b1b      	ldrb	r3, [r3, #12]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 fbff 	bl	8006e40 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2204      	movs	r2, #4
 8005646:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800564a:	e035      	b.n	80056b8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	7b1b      	ldrb	r3, [r3, #12]
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f001 fefe 	bl	8007454 <USBH_LL_GetURBState>
 8005658:	4603      	mov	r3, r0
 800565a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800565c:	7cfb      	ldrb	r3, [r7, #19]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d129      	bne.n	80056b6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	7b1b      	ldrb	r3, [r3, #12]
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 fe61 	bl	8007330 <USBH_LL_GetLastXferSize>
 800566e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	429a      	cmp	r2, r3
 8005678:	d016      	beq.n	80056a8 <CDC_ProcessReception+0x9e>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	8b5b      	ldrh	r3, [r3, #26]
 800567e:	461a      	mov	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4293      	cmp	r3, r2
 8005684:	d910      	bls.n	80056a8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad2      	subs	r2, r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	441a      	add	r2, r3
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2203      	movs	r2, #3
 80056a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80056a6:	e006      	b.n	80056b6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f80f 	bl	80056d4 <USBH_CDC_ReceiveCallback>
      break;
 80056b6:	bf00      	nop
  }
}
 80056b8:	bf00      	nop
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005710:	2302      	movs	r3, #2
 8005712:	e029      	b.n	8005768 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	79fa      	ldrb	r2, [r7, #7]
 8005718:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f81f 	bl	8005770 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f001 fd31 	bl	80071c8 <USBH_LL_Init>

  return USBH_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e009      	b.n	8005796 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	33e0      	adds	r3, #224	; 0xe0
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	2200      	movs	r2, #0
 800578e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3301      	adds	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b0f      	cmp	r3, #15
 800579a:	d9f2      	bls.n	8005782 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	e009      	b.n	80057b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3301      	adds	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057bc:	d3f1      	bcc.n	80057a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2240      	movs	r2, #64	; 0x40
 80057e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d016      	beq.n	800585a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10e      	bne.n	8005854 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800583c:	1c59      	adds	r1, r3, #1
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	33de      	adds	r3, #222	; 0xde
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
 8005852:	e004      	b.n	800585e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005854:	2302      	movs	r3, #2
 8005856:	73fb      	strb	r3, [r7, #15]
 8005858:	e001      	b.n	800585e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800585a:	2302      	movs	r3, #2
 800585c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800585e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005882:	78fa      	ldrb	r2, [r7, #3]
 8005884:	429a      	cmp	r2, r3
 8005886:	d204      	bcs.n	8005892 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	78fa      	ldrb	r2, [r7, #3]
 800588c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005890:	e001      	b.n	8005896 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005892:	2302      	movs	r3, #2
 8005894:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	4608      	mov	r0, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	461a      	mov	r2, r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	70fb      	strb	r3, [r7, #3]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70bb      	strb	r3, [r7, #2]
 80058ba:	4613      	mov	r3, r2
 80058bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80058cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80058ce:	e025      	b.n	800591c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	221a      	movs	r2, #26
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	3308      	adds	r3, #8
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	3302      	adds	r3, #2
 80058e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	795b      	ldrb	r3, [r3, #5]
 80058e6:	78fa      	ldrb	r2, [r7, #3]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d002      	beq.n	80058f2 <USBH_FindInterface+0x4e>
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2bff      	cmp	r3, #255	; 0xff
 80058f0:	d111      	bne.n	8005916 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80058f6:	78ba      	ldrb	r2, [r7, #2]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d002      	beq.n	8005902 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80058fc:	78bb      	ldrb	r3, [r7, #2]
 80058fe:	2bff      	cmp	r3, #255	; 0xff
 8005900:	d109      	bne.n	8005916 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005906:	787a      	ldrb	r2, [r7, #1]
 8005908:	429a      	cmp	r2, r3
 800590a:	d002      	beq.n	8005912 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800590c:	787b      	ldrb	r3, [r7, #1]
 800590e:	2bff      	cmp	r3, #255	; 0xff
 8005910:	d101      	bne.n	8005916 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
 8005914:	e006      	b.n	8005924 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	3301      	adds	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d9d6      	bls.n	80058d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005922:	23ff      	movs	r3, #255	; 0xff
}
 8005924:	4618      	mov	r0, r3
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 fc81 	bl	8007240 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800593e:	2101      	movs	r1, #1
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 fd9a 	bl	800747a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af04      	add	r7, sp, #16
 8005956:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005958:	2302      	movs	r3, #2
 800595a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d102      	bne.n	8005972 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2203      	movs	r2, #3
 8005970:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b0b      	cmp	r3, #11
 800597a:	f200 81be 	bhi.w	8005cfa <USBH_Process+0x3aa>
 800597e:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <USBH_Process+0x34>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	080059b5 	.word	0x080059b5
 8005988:	080059e7 	.word	0x080059e7
 800598c:	08005a4f 	.word	0x08005a4f
 8005990:	08005c95 	.word	0x08005c95
 8005994:	08005cfb 	.word	0x08005cfb
 8005998:	08005af3 	.word	0x08005af3
 800599c:	08005c3b 	.word	0x08005c3b
 80059a0:	08005b29 	.word	0x08005b29
 80059a4:	08005b49 	.word	0x08005b49
 80059a8:	08005b69 	.word	0x08005b69
 80059ac:	08005bad 	.word	0x08005bad
 80059b0:	08005c7d 	.word	0x08005c7d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 819e 	beq.w	8005cfe <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80059c8:	20c8      	movs	r0, #200	; 0xc8
 80059ca:	f001 fd9d 	bl	8007508 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 fc93 	bl	80072fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80059e4:	e18b      	b.n	8005cfe <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d107      	bne.n	8005a00 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80059fe:	e18d      	b.n	8005d1c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a0a:	d914      	bls.n	8005a36 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005a12:	3301      	adds	r3, #1
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d903      	bls.n	8005a2e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	220d      	movs	r2, #13
 8005a2a:	701a      	strb	r2, [r3, #0]
      break;
 8005a2c:	e176      	b.n	8005d1c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
      break;
 8005a34:	e172      	b.n	8005d1c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005a3c:	f103 020a 	add.w	r2, r3, #10
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005a46:	200a      	movs	r0, #10
 8005a48:	f001 fd5e 	bl	8007508 <USBH_Delay>
      break;
 8005a4c:	e166      	b.n	8005d1c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a5e:	2104      	movs	r1, #4
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005a64:	2064      	movs	r0, #100	; 0x64
 8005a66:	f001 fd4f 	bl	8007508 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 fc1e 	bl	80072ac <USBH_LL_GetSpeed>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461a      	mov	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2205      	movs	r2, #5
 8005a7e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005a80:	2100      	movs	r1, #0
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f001 fa29 	bl	8006eda <USBH_AllocPipe>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 fa21 	bl	8006eda <USBH_AllocPipe>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7919      	ldrb	r1, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005ab4:	b292      	uxth	r2, r2
 8005ab6:	9202      	str	r2, [sp, #8]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	9201      	str	r2, [sp, #4]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2280      	movs	r2, #128	; 0x80
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 f9da 	bl	8006e7c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	7959      	ldrb	r1, [r3, #5]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005adc:	b292      	uxth	r2, r2
 8005ade:	9202      	str	r2, [sp, #8]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	9201      	str	r2, [sp, #4]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2200      	movs	r2, #0
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 f9c6 	bl	8006e7c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005af0:	e114      	b.n	8005d1c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f918 	bl	8005d28 <USBH_HandleEnum>
 8005af8:	4603      	mov	r3, r0
 8005afa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005afc:	7bbb      	ldrb	r3, [r7, #14]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 80fe 	bne.w	8005d02 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d103      	bne.n	8005b20 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005b1e:	e0f0      	b.n	8005d02 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2207      	movs	r2, #7
 8005b24:	701a      	strb	r2, [r3, #0]
      break;
 8005b26:	e0ec      	b.n	8005d02 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80e9 	beq.w	8005d06 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2208      	movs	r2, #8
 8005b44:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005b46:	e0de      	b.n	8005d06 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fc2c 	bl	80063b0 <USBH_SetCfg>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f040 80d5 	bne.w	8005d0a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2209      	movs	r2, #9
 8005b64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005b66:	e0d0      	b.n	8005d0a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8005b76:	2101      	movs	r1, #1
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fc3c 	bl	80063f6 <USBH_SetFeature>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005b82:	7bbb      	ldrb	r3, [r7, #14]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	220a      	movs	r2, #10
 8005b8e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005b90:	e0bd      	b.n	8005d0e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8005b92:	7bbb      	ldrb	r3, [r7, #14]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	f040 80b9 	bne.w	8005d0e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	220a      	movs	r2, #10
 8005ba0:	701a      	strb	r2, [r3, #0]
      break;
 8005ba2:	e0b4      	b.n	8005d0e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	220a      	movs	r2, #10
 8005ba8:	701a      	strb	r2, [r3, #0]
      break;
 8005baa:	e0b0      	b.n	8005d0e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 80ad 	beq.w	8005d12 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	e016      	b.n	8005bf4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005bc6:	7bfa      	ldrb	r2, [r7, #15]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	32de      	adds	r2, #222	; 0xde
 8005bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd0:	791a      	ldrb	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d108      	bne.n	8005bee <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005bdc:	7bfa      	ldrb	r2, [r7, #15]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	32de      	adds	r2, #222	; 0xde
 8005be2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005bec:	e005      	b.n	8005bfa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0e5      	beq.n	8005bc6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d016      	beq.n	8005c32 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2206      	movs	r2, #6
 8005c1a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c22:	2103      	movs	r1, #3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005c28:	e073      	b.n	8005d12 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	220d      	movs	r2, #13
 8005c2e:	701a      	strb	r2, [r3, #0]
      break;
 8005c30:	e06f      	b.n	8005d12 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	220d      	movs	r2, #13
 8005c36:	701a      	strb	r2, [r3, #0]
      break;
 8005c38:	e06b      	b.n	8005d12 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d017      	beq.n	8005c74 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	4798      	blx	r3
 8005c50:	4603      	mov	r3, r0
 8005c52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	220b      	movs	r2, #11
 8005c60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005c62:	e058      	b.n	8005d16 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d154      	bne.n	8005d16 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	220d      	movs	r2, #13
 8005c70:	701a      	strb	r2, [r3, #0]
      break;
 8005c72:	e050      	b.n	8005d16 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	220d      	movs	r2, #13
 8005c78:	701a      	strb	r2, [r3, #0]
      break;
 8005c7a:	e04c      	b.n	8005d16 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d049      	beq.n	8005d1a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
      }
      break;
 8005c92:	e042      	b.n	8005d1a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fd67 	bl	8005770 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cd0:	2105      	movs	r1, #5
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d107      	bne.n	8005cf2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff fe20 	bl	8005930 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005cf0:	e014      	b.n	8005d1c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f001 faa4 	bl	8007240 <USBH_LL_Start>
      break;
 8005cf8:	e010      	b.n	8005d1c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8005cfa:	bf00      	nop
 8005cfc:	e00e      	b.n	8005d1c <USBH_Process+0x3cc>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e00c      	b.n	8005d1c <USBH_Process+0x3cc>
      break;
 8005d02:	bf00      	nop
 8005d04:	e00a      	b.n	8005d1c <USBH_Process+0x3cc>
    break;
 8005d06:	bf00      	nop
 8005d08:	e008      	b.n	8005d1c <USBH_Process+0x3cc>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e006      	b.n	8005d1c <USBH_Process+0x3cc>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e004      	b.n	8005d1c <USBH_Process+0x3cc>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <USBH_Process+0x3cc>
      break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <USBH_Process+0x3cc>
      break;
 8005d1a:	bf00      	nop
  }
  return USBH_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop

08005d28 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af04      	add	r7, sp, #16
 8005d2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005d30:	2301      	movs	r3, #1
 8005d32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b07      	cmp	r3, #7
 8005d3e:	f200 81c1 	bhi.w	80060c4 <USBH_HandleEnum+0x39c>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <USBH_HandleEnum+0x20>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d69 	.word	0x08005d69
 8005d4c:	08005e27 	.word	0x08005e27
 8005d50:	08005e91 	.word	0x08005e91
 8005d54:	08005f1f 	.word	0x08005f1f
 8005d58:	08005f89 	.word	0x08005f89
 8005d5c:	08005ff9 	.word	0x08005ff9
 8005d60:	0800603f 	.word	0x0800603f
 8005d64:	08006085 	.word	0x08006085
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005d68:	2108      	movs	r1, #8
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa50 	bl	8006210 <USBH_Get_DevDesc>
 8005d70:	4603      	mov	r3, r0
 8005d72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d130      	bne.n	8005ddc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	7919      	ldrb	r1, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005d9e:	b292      	uxth	r2, r2
 8005da0:	9202      	str	r2, [sp, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	9201      	str	r2, [sp, #4]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	4603      	mov	r3, r0
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 f865 	bl	8006e7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	7959      	ldrb	r1, [r3, #5]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005dc6:	b292      	uxth	r2, r2
 8005dc8:	9202      	str	r2, [sp, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	9201      	str	r2, [sp, #4]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 f851 	bl	8006e7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005dda:	e175      	b.n	80060c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005ddc:	7bbb      	ldrb	r3, [r7, #14]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	f040 8172 	bne.w	80060c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005dea:	3301      	adds	r3, #1
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d903      	bls.n	8005e06 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	220d      	movs	r2, #13
 8005e02:	701a      	strb	r2, [r3, #0]
      break;
 8005e04:	e160      	b.n	80060c8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	795b      	ldrb	r3, [r3, #5]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 f885 	bl	8006f1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	791b      	ldrb	r3, [r3, #4]
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 f87f 	bl	8006f1c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
      break;
 8005e24:	e150      	b.n	80060c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005e26:	2112      	movs	r1, #18
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f9f1 	bl	8006210 <USBH_Get_DevDesc>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005e3e:	e145      	b.n	80060cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	f040 8142 	bne.w	80060cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e4e:	3301      	adds	r3, #1
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d903      	bls.n	8005e6a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	220d      	movs	r2, #13
 8005e66:	701a      	strb	r2, [r3, #0]
      break;
 8005e68:	e130      	b.n	80060cc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	795b      	ldrb	r3, [r3, #5]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 f853 	bl	8006f1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	791b      	ldrb	r3, [r3, #4]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f001 f84d 	bl	8006f1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	701a      	strb	r2, [r3, #0]
      break;
 8005e8e:	e11d      	b.n	80060cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005e90:	2101      	movs	r1, #1
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa68 	bl	8006368 <USBH_SetAddress>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d132      	bne.n	8005f08 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005ea2:	2002      	movs	r0, #2
 8005ea4:	f001 fb30 	bl	8007508 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	7919      	ldrb	r1, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005eca:	b292      	uxth	r2, r2
 8005ecc:	9202      	str	r2, [sp, #8]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	9201      	str	r2, [sp, #4]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 ffcf 	bl	8006e7c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7959      	ldrb	r1, [r3, #5]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005ef2:	b292      	uxth	r2, r2
 8005ef4:	9202      	str	r2, [sp, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	9201      	str	r2, [sp, #4]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	4603      	mov	r3, r0
 8005efe:	2200      	movs	r2, #0
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 ffbb 	bl	8006e7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005f06:	e0e3      	b.n	80060d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f08:	7bbb      	ldrb	r3, [r7, #14]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	f040 80e0 	bne.w	80060d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	220d      	movs	r2, #13
 8005f14:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	705a      	strb	r2, [r3, #1]
      break;
 8005f1c:	e0d8      	b.n	80060d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005f1e:	2109      	movs	r1, #9
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f99d 	bl	8006260 <USBH_Get_CfgDesc>
 8005f26:	4603      	mov	r3, r0
 8005f28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2204      	movs	r2, #4
 8005f34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005f36:	e0cd      	b.n	80060d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	f040 80ca 	bne.w	80060d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f46:	3301      	adds	r3, #1
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d903      	bls.n	8005f62 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	220d      	movs	r2, #13
 8005f5e:	701a      	strb	r2, [r3, #0]
      break;
 8005f60:	e0b8      	b.n	80060d4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	795b      	ldrb	r3, [r3, #5]
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 ffd7 	bl	8006f1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	791b      	ldrb	r3, [r3, #4]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 ffd1 	bl	8006f1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]
      break;
 8005f86:	e0a5      	b.n	80060d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f965 	bl	8006260 <USBH_Get_CfgDesc>
 8005f96:	4603      	mov	r3, r0
 8005f98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d103      	bne.n	8005fa8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2205      	movs	r2, #5
 8005fa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005fa6:	e097      	b.n	80060d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fa8:	7bbb      	ldrb	r3, [r7, #14]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	f040 8094 	bne.w	80060d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d903      	bls.n	8005fd2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	220d      	movs	r2, #13
 8005fce:	701a      	strb	r2, [r3, #0]
      break;
 8005fd0:	e082      	b.n	80060d8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	795b      	ldrb	r3, [r3, #5]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 ff9f 	bl	8006f1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	791b      	ldrb	r3, [r3, #4]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 ff99 	bl	8006f1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
      break;
 8005ff6:	e06f      	b.n	80060d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d019      	beq.n	8006036 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800600e:	23ff      	movs	r3, #255	; 0xff
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f949 	bl	80062a8 <USBH_Get_StringDesc>
 8006016:	4603      	mov	r3, r0
 8006018:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800601a:	7bbb      	ldrb	r3, [r7, #14]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d103      	bne.n	8006028 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2206      	movs	r2, #6
 8006024:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006026:	e059      	b.n	80060dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d156      	bne.n	80060dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2206      	movs	r2, #6
 8006032:	705a      	strb	r2, [r3, #1]
      break;
 8006034:	e052      	b.n	80060dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2206      	movs	r2, #6
 800603a:	705a      	strb	r2, [r3, #1]
      break;
 800603c:	e04e      	b.n	80060dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006044:	2b00      	cmp	r3, #0
 8006046:	d019      	beq.n	800607c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006054:	23ff      	movs	r3, #255	; 0xff
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f926 	bl	80062a8 <USBH_Get_StringDesc>
 800605c:	4603      	mov	r3, r0
 800605e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2207      	movs	r2, #7
 800606a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800606c:	e038      	b.n	80060e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	2b03      	cmp	r3, #3
 8006072:	d135      	bne.n	80060e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2207      	movs	r2, #7
 8006078:	705a      	strb	r2, [r3, #1]
      break;
 800607a:	e031      	b.n	80060e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2207      	movs	r2, #7
 8006080:	705a      	strb	r2, [r3, #1]
      break;
 8006082:	e02d      	b.n	80060e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800608a:	2b00      	cmp	r3, #0
 800608c:	d017      	beq.n	80060be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800609a:	23ff      	movs	r3, #255	; 0xff
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f903 	bl	80062a8 <USBH_Get_StringDesc>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80060b0:	e018      	b.n	80060e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d115      	bne.n	80060e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	73fb      	strb	r3, [r7, #15]
      break;
 80060bc:	e012      	b.n	80060e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
      break;
 80060c2:	e00f      	b.n	80060e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80060c4:	bf00      	nop
 80060c6:	e00e      	b.n	80060e6 <USBH_HandleEnum+0x3be>
      break;
 80060c8:	bf00      	nop
 80060ca:	e00c      	b.n	80060e6 <USBH_HandleEnum+0x3be>
      break;
 80060cc:	bf00      	nop
 80060ce:	e00a      	b.n	80060e6 <USBH_HandleEnum+0x3be>
      break;
 80060d0:	bf00      	nop
 80060d2:	e008      	b.n	80060e6 <USBH_HandleEnum+0x3be>
      break;
 80060d4:	bf00      	nop
 80060d6:	e006      	b.n	80060e6 <USBH_HandleEnum+0x3be>
      break;
 80060d8:	bf00      	nop
 80060da:	e004      	b.n	80060e6 <USBH_HandleEnum+0x3be>
      break;
 80060dc:	bf00      	nop
 80060de:	e002      	b.n	80060e6 <USBH_HandleEnum+0x3be>
      break;
 80060e0:	bf00      	nop
 80060e2:	e000      	b.n	80060e6 <USBH_HandleEnum+0x3be>
      break;
 80060e4:	bf00      	nop
  }
  return Status;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f804 	bl	8006132 <USBH_HandleSof>
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b0b      	cmp	r3, #11
 8006142:	d10a      	bne.n	800615a <USBH_HandleSof+0x28>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
  }
}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006172:	bf00      	nop
}
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800618e:	bf00      	nop
}
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 f844 	bl	8007276 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	791b      	ldrb	r3, [r3, #4]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fe91 	bl	8006f1c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	795b      	ldrb	r3, [r3, #5]
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fe8b 	bl	8006f1c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af02      	add	r7, sp, #8
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	b29b      	uxth	r3, r3
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800622e:	2100      	movs	r1, #0
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f864 	bl	80062fe <USBH_GetDescriptor>
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	b292      	uxth	r2, r2
 8006250:	4619      	mov	r1, r3
 8006252:	f000 f918 	bl	8006486 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af02      	add	r7, sp, #8
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	331c      	adds	r3, #28
 8006270:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006272:	887b      	ldrh	r3, [r7, #2]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800627c:	2100      	movs	r1, #0
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f83d 	bl	80062fe <USBH_GetDescriptor>
 8006284:	4603      	mov	r3, r0
 8006286:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d107      	bne.n	800629e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800628e:	887b      	ldrh	r3, [r7, #2]
 8006290:	461a      	mov	r2, r3
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f987 	bl	80065a8 <USBH_ParseCfgDesc>
 800629a:	4603      	mov	r3, r0
 800629c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	461a      	mov	r2, r3
 80062b4:	460b      	mov	r3, r1
 80062b6:	72fb      	strb	r3, [r7, #11]
 80062b8:	4613      	mov	r3, r2
 80062ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80062bc:	7afb      	ldrb	r3, [r7, #11]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80062c4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80062cc:	893b      	ldrh	r3, [r7, #8]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	460b      	mov	r3, r1
 80062d2:	2100      	movs	r1, #0
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f812 	bl	80062fe <USBH_GetDescriptor>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d107      	bne.n	80062f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80062ea:	893a      	ldrh	r2, [r7, #8]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fb24 	bl	800693c <USBH_ParseStringDesc>
  }

  return status;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	607b      	str	r3, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	72fb      	strb	r3, [r7, #11]
 800630c:	4613      	mov	r3, r2
 800630e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	789b      	ldrb	r3, [r3, #2]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d11c      	bne.n	8006352 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006318:	7afb      	ldrb	r3, [r7, #11]
 800631a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800631e:	b2da      	uxtb	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2206      	movs	r2, #6
 8006328:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	893a      	ldrh	r2, [r7, #8]
 800632e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006330:	893b      	ldrh	r3, [r7, #8]
 8006332:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800633a:	d104      	bne.n	8006346 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f240 4209 	movw	r2, #1033	; 0x409
 8006342:	829a      	strh	r2, [r3, #20]
 8006344:	e002      	b.n	800634c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8b3a      	ldrh	r2, [r7, #24]
 8006350:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006352:	8b3b      	ldrh	r3, [r7, #24]
 8006354:	461a      	mov	r2, r3
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fb3d 	bl	80069d8 <USBH_CtlReq>
 800635e:	4603      	mov	r3, r0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	789b      	ldrb	r3, [r3, #2]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d10f      	bne.n	800639c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2205      	movs	r2, #5
 8006386:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800639c:	2200      	movs	r2, #0
 800639e:	2100      	movs	r1, #0
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fb19 	bl	80069d8 <USBH_CtlReq>
 80063a6:	4603      	mov	r3, r0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	789b      	ldrb	r3, [r3, #2]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d10e      	bne.n	80063e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2209      	movs	r2, #9
 80063ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	887a      	ldrh	r2, [r7, #2]
 80063d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80063e2:	2200      	movs	r2, #0
 80063e4:	2100      	movs	r1, #0
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 faf6 	bl	80069d8 <USBH_CtlReq>
 80063ec:	4603      	mov	r3, r0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	789b      	ldrb	r3, [r3, #2]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d10f      	bne.n	800642a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2203      	movs	r2, #3
 8006414:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800642a:	2200      	movs	r2, #0
 800642c:	2100      	movs	r1, #0
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fad2 	bl	80069d8 <USBH_CtlReq>
 8006434:	4603      	mov	r3, r0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	789b      	ldrb	r3, [r3, #2]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d10f      	bne.n	8006472 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006472:	2200      	movs	r2, #0
 8006474:	2100      	movs	r1, #0
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 faae 	bl	80069d8 <USBH_CtlReq>
 800647c:	4603      	mov	r3, r0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	4613      	mov	r3, r2
 8006492:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	785a      	ldrb	r2, [r3, #1]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	3302      	adds	r3, #2
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	3303      	adds	r3, #3
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	791a      	ldrb	r2, [r3, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	795a      	ldrb	r2, [r3, #5]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	799a      	ldrb	r2, [r3, #6]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	79da      	ldrb	r2, [r3, #7]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	79db      	ldrb	r3, [r3, #7]
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	dc11      	bgt.n	800650c <USBH_ParseDevDesc+0x86>
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	db16      	blt.n	800651a <USBH_ParseDevDesc+0x94>
 80064ec:	3b08      	subs	r3, #8
 80064ee:	2201      	movs	r2, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80064f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf14      	ite	ne
 8006500:	2301      	movne	r3, #1
 8006502:	2300      	moveq	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d102      	bne.n	8006510 <USBH_ParseDevDesc+0x8a>
 800650a:	e006      	b.n	800651a <USBH_ParseDevDesc+0x94>
 800650c:	2b40      	cmp	r3, #64	; 0x40
 800650e:	d104      	bne.n	800651a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	79da      	ldrb	r2, [r3, #7]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	71da      	strb	r2, [r3, #7]
      break;
 8006518:	e003      	b.n	8006522 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2240      	movs	r2, #64	; 0x40
 800651e:	71da      	strb	r2, [r3, #7]
      break;
 8006520:	bf00      	nop
  }

  if (length > 8U)
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	2b08      	cmp	r3, #8
 8006526:	d939      	bls.n	800659c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	3308      	adds	r3, #8
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b29a      	uxth	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	3309      	adds	r3, #9
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	021b      	lsls	r3, r3, #8
 800653a:	b29b      	uxth	r3, r3
 800653c:	4313      	orrs	r3, r2
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	330a      	adds	r3, #10
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	b29a      	uxth	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	330b      	adds	r3, #11
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	b29b      	uxth	r3, r3
 8006558:	4313      	orrs	r3, r2
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	330c      	adds	r3, #12
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	b29a      	uxth	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	330d      	adds	r3, #13
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	021b      	lsls	r3, r3, #8
 8006572:	b29b      	uxth	r3, r3
 8006574:	4313      	orrs	r3, r2
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	7b9a      	ldrb	r2, [r3, #14]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	7bda      	ldrb	r2, [r3, #15]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	7c1a      	ldrb	r2, [r3, #16]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	7c5a      	ldrb	r2, [r3, #17]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	745a      	strb	r2, [r3, #17]
  }
}
 800659c:	bf00      	nop
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08c      	sub	sp, #48	; 0x30
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	4613      	mov	r3, r2
 80065b4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80065bc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	785a      	ldrb	r2, [r3, #1]
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	3302      	adds	r3, #2
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	3303      	adds	r3, #3
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006604:	bf28      	it	cs
 8006606:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800660a:	b29a      	uxth	r2, r3
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	791a      	ldrb	r2, [r3, #4]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	795a      	ldrb	r2, [r3, #5]
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	799a      	ldrb	r2, [r3, #6]
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	79da      	ldrb	r2, [r3, #7]
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	7a1a      	ldrb	r2, [r3, #8]
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b09      	cmp	r3, #9
 800663e:	d002      	beq.n	8006646 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	2209      	movs	r2, #9
 8006644:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	2b09      	cmp	r3, #9
 800664a:	f240 809d 	bls.w	8006788 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800664e:	2309      	movs	r3, #9
 8006650:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006656:	e081      	b.n	800675c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006658:	f107 0316 	add.w	r3, r7, #22
 800665c:	4619      	mov	r1, r3
 800665e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006660:	f000 f99f 	bl	80069a2 <USBH_GetNextDesc>
 8006664:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	785b      	ldrb	r3, [r3, #1]
 800666a:	2b04      	cmp	r3, #4
 800666c:	d176      	bne.n	800675c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b09      	cmp	r3, #9
 8006674:	d002      	beq.n	800667c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	2209      	movs	r2, #9
 800667a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800667c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006680:	221a      	movs	r2, #26
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	3308      	adds	r3, #8
 8006688:	6a3a      	ldr	r2, [r7, #32]
 800668a:	4413      	add	r3, r2
 800668c:	3302      	adds	r3, #2
 800668e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006692:	69f8      	ldr	r0, [r7, #28]
 8006694:	f000 f87e 	bl	8006794 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80066a2:	e043      	b.n	800672c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80066a4:	f107 0316 	add.w	r3, r7, #22
 80066a8:	4619      	mov	r1, r3
 80066aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ac:	f000 f979 	bl	80069a2 <USBH_GetNextDesc>
 80066b0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b05      	cmp	r3, #5
 80066b8:	d138      	bne.n	800672c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	795b      	ldrb	r3, [r3, #5]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10f      	bne.n	80066e2 <USBH_ParseCfgDesc+0x13a>
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	799b      	ldrb	r3, [r3, #6]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d10b      	bne.n	80066e2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	79db      	ldrb	r3, [r3, #7]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10f      	bne.n	80066f2 <USBH_ParseCfgDesc+0x14a>
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b09      	cmp	r3, #9
 80066d8:	d00b      	beq.n	80066f2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	2209      	movs	r2, #9
 80066de:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80066e0:	e007      	b.n	80066f2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b07      	cmp	r3, #7
 80066e8:	d004      	beq.n	80066f4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	2207      	movs	r2, #7
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e000      	b.n	80066f4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80066f2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80066f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80066fc:	3201      	adds	r2, #1
 80066fe:	00d2      	lsls	r2, r2, #3
 8006700:	211a      	movs	r1, #26
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	4413      	add	r3, r2
 8006708:	3308      	adds	r3, #8
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	4413      	add	r3, r2
 800670e:	3304      	adds	r3, #4
 8006710:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006714:	69b9      	ldr	r1, [r7, #24]
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f86b 	bl	80067f2 <USBH_ParseEPDesc>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006722:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006726:	3301      	adds	r3, #1
 8006728:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	791b      	ldrb	r3, [r3, #4]
 8006730:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006734:	429a      	cmp	r2, r3
 8006736:	d204      	bcs.n	8006742 <USBH_ParseCfgDesc+0x19a>
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	885a      	ldrh	r2, [r3, #2]
 800673c:	8afb      	ldrh	r3, [r7, #22]
 800673e:	429a      	cmp	r2, r3
 8006740:	d8b0      	bhi.n	80066a4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	791b      	ldrb	r3, [r3, #4]
 8006746:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800674a:	429a      	cmp	r2, r3
 800674c:	d201      	bcs.n	8006752 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800674e:	2303      	movs	r3, #3
 8006750:	e01c      	b.n	800678c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006756:	3301      	adds	r3, #1
 8006758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800675c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006760:	2b01      	cmp	r3, #1
 8006762:	d805      	bhi.n	8006770 <USBH_ParseCfgDesc+0x1c8>
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	885a      	ldrh	r2, [r3, #2]
 8006768:	8afb      	ldrh	r3, [r7, #22]
 800676a:	429a      	cmp	r2, r3
 800676c:	f63f af74 	bhi.w	8006658 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	791b      	ldrb	r3, [r3, #4]
 8006774:	2b02      	cmp	r3, #2
 8006776:	bf28      	it	cs
 8006778:	2302      	movcs	r3, #2
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006780:	429a      	cmp	r2, r3
 8006782:	d201      	bcs.n	8006788 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006784:	2303      	movs	r3, #3
 8006786:	e001      	b.n	800678c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006788:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800678c:	4618      	mov	r0, r3
 800678e:	3730      	adds	r7, #48	; 0x30
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	785a      	ldrb	r2, [r3, #1]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	789a      	ldrb	r2, [r3, #2]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	78da      	ldrb	r2, [r3, #3]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	791a      	ldrb	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	795a      	ldrb	r2, [r3, #5]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	799a      	ldrb	r2, [r3, #6]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	79da      	ldrb	r2, [r3, #7]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	7a1a      	ldrb	r2, [r3, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	721a      	strb	r2, [r3, #8]
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b087      	sub	sp, #28
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	781a      	ldrb	r2, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	785a      	ldrb	r2, [r3, #1]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	789a      	ldrb	r2, [r3, #2]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	78da      	ldrb	r2, [r3, #3]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3304      	adds	r3, #4
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	b29a      	uxth	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3305      	adds	r3, #5
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	b29b      	uxth	r3, r3
 8006836:	4313      	orrs	r3, r2
 8006838:	b29a      	uxth	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	799a      	ldrb	r2, [r3, #6]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	889b      	ldrh	r3, [r3, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800684e:	2303      	movs	r3, #3
 8006850:	75fb      	strb	r3, [r7, #23]
 8006852:	e033      	b.n	80068bc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	889b      	ldrh	r3, [r3, #4]
 8006858:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800685c:	f023 0307 	bic.w	r3, r3, #7
 8006860:	b29a      	uxth	r2, r3
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	889b      	ldrh	r3, [r3, #4]
 800686a:	b21a      	sxth	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3304      	adds	r3, #4
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	b299      	uxth	r1, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3305      	adds	r3, #5
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	b29b      	uxth	r3, r3
 8006880:	430b      	orrs	r3, r1
 8006882:	b29b      	uxth	r3, r3
 8006884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006888:	2b00      	cmp	r3, #0
 800688a:	d110      	bne.n	80068ae <USBH_ParseEPDesc+0xbc>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3304      	adds	r3, #4
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b299      	uxth	r1, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3305      	adds	r3, #5
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	b29b      	uxth	r3, r3
 80068a0:	430b      	orrs	r3, r1
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	b21b      	sxth	r3, r3
 80068a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068aa:	b21b      	sxth	r3, r3
 80068ac:	e001      	b.n	80068b2 <USBH_ParseEPDesc+0xc0>
 80068ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b21b      	sxth	r3, r3
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d116      	bne.n	80068f4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	78db      	ldrb	r3, [r3, #3]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d005      	beq.n	80068de <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	78db      	ldrb	r3, [r3, #3]
 80068d6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d127      	bne.n	800692e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	799b      	ldrb	r3, [r3, #6]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <USBH_ParseEPDesc+0xfc>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	799b      	ldrb	r3, [r3, #6]
 80068ea:	2b10      	cmp	r3, #16
 80068ec:	d91f      	bls.n	800692e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80068ee:	2303      	movs	r3, #3
 80068f0:	75fb      	strb	r3, [r7, #23]
 80068f2:	e01c      	b.n	800692e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	78db      	ldrb	r3, [r3, #3]
 80068f8:	f003 0303 	and.w	r3, r3, #3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10a      	bne.n	8006916 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	799b      	ldrb	r3, [r3, #6]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <USBH_ParseEPDesc+0x11e>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	799b      	ldrb	r3, [r3, #6]
 800690c:	2b10      	cmp	r3, #16
 800690e:	d90e      	bls.n	800692e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006910:	2303      	movs	r3, #3
 8006912:	75fb      	strb	r3, [r7, #23]
 8006914:	e00b      	b.n	800692e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	78db      	ldrb	r3, [r3, #3]
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	2b03      	cmp	r3, #3
 8006920:	d105      	bne.n	800692e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	799b      	ldrb	r3, [r3, #6]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800692a:	2303      	movs	r3, #3
 800692c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006930:	4618      	mov	r0, r3
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d120      	bne.n	8006996 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	1e9a      	subs	r2, r3, #2
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	4293      	cmp	r3, r2
 800695e:	bf28      	it	cs
 8006960:	4613      	movcs	r3, r2
 8006962:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3302      	adds	r3, #2
 8006968:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800696a:	2300      	movs	r3, #0
 800696c:	82fb      	strh	r3, [r7, #22]
 800696e:	e00b      	b.n	8006988 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006970:	8afb      	ldrh	r3, [r7, #22]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	3301      	adds	r3, #1
 8006980:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006982:	8afb      	ldrh	r3, [r7, #22]
 8006984:	3302      	adds	r3, #2
 8006986:	82fb      	strh	r3, [r7, #22]
 8006988:	8afa      	ldrh	r2, [r7, #22]
 800698a:	8abb      	ldrh	r3, [r7, #20]
 800698c:	429a      	cmp	r2, r3
 800698e:	d3ef      	bcc.n	8006970 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
  }
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	881a      	ldrh	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	4413      	add	r3, r2
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4413      	add	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069ca:	68fb      	ldr	r3, [r7, #12]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80069e6:	2301      	movs	r3, #1
 80069e8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	789b      	ldrb	r3, [r3, #2]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d002      	beq.n	80069f8 <USBH_CtlReq+0x20>
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d00f      	beq.n	8006a16 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80069f6:	e027      	b.n	8006a48 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006a10:	2301      	movs	r3, #1
 8006a12:	75fb      	strb	r3, [r7, #23]
      break;
 8006a14:	e018      	b.n	8006a48 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f81c 	bl	8006a54 <USBH_HandleControl>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <USBH_CtlReq+0x54>
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d106      	bne.n	8006a3a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	761a      	strb	r2, [r3, #24]
      break;
 8006a38:	e005      	b.n	8006a46 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d102      	bne.n	8006a46 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	709a      	strb	r2, [r3, #2]
      break;
 8006a46:	bf00      	nop
  }
  return status;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a60:	2300      	movs	r3, #0
 8006a62:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7e1b      	ldrb	r3, [r3, #24]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	2b0a      	cmp	r3, #10
 8006a6c:	f200 8156 	bhi.w	8006d1c <USBH_HandleControl+0x2c8>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <USBH_HandleControl+0x24>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006aa5 	.word	0x08006aa5
 8006a7c:	08006abf 	.word	0x08006abf
 8006a80:	08006b29 	.word	0x08006b29
 8006a84:	08006b4f 	.word	0x08006b4f
 8006a88:	08006b87 	.word	0x08006b87
 8006a8c:	08006bb1 	.word	0x08006bb1
 8006a90:	08006c03 	.word	0x08006c03
 8006a94:	08006c25 	.word	0x08006c25
 8006a98:	08006c61 	.word	0x08006c61
 8006a9c:	08006c87 	.word	0x08006c87
 8006aa0:	08006cc5 	.word	0x08006cc5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f103 0110 	add.w	r1, r3, #16
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	795b      	ldrb	r3, [r3, #5]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f943 	bl	8006d3c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	761a      	strb	r2, [r3, #24]
      break;
 8006abc:	e139      	b.n	8006d32 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	795b      	ldrb	r3, [r3, #5]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fcc5 	bl	8007454 <USBH_LL_GetURBState>
 8006aca:	4603      	mov	r3, r0
 8006acc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d11e      	bne.n	8006b12 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	7c1b      	ldrb	r3, [r3, #16]
 8006ad8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006adc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	8adb      	ldrh	r3, [r3, #22]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006ae6:	7b7b      	ldrb	r3, [r7, #13]
 8006ae8:	2b80      	cmp	r3, #128	; 0x80
 8006aea:	d103      	bne.n	8006af4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2203      	movs	r2, #3
 8006af0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006af2:	e115      	b.n	8006d20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2205      	movs	r2, #5
 8006af8:	761a      	strb	r2, [r3, #24]
      break;
 8006afa:	e111      	b.n	8006d20 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006afc:	7b7b      	ldrb	r3, [r7, #13]
 8006afe:	2b80      	cmp	r3, #128	; 0x80
 8006b00:	d103      	bne.n	8006b0a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2209      	movs	r2, #9
 8006b06:	761a      	strb	r2, [r3, #24]
      break;
 8006b08:	e10a      	b.n	8006d20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2207      	movs	r2, #7
 8006b0e:	761a      	strb	r2, [r3, #24]
      break;
 8006b10:	e106      	b.n	8006d20 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d003      	beq.n	8006b20 <USBH_HandleControl+0xcc>
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	f040 8100 	bne.w	8006d20 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	220b      	movs	r2, #11
 8006b24:	761a      	strb	r2, [r3, #24]
      break;
 8006b26:	e0fb      	b.n	8006d20 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6899      	ldr	r1, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	899a      	ldrh	r2, [r3, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	791b      	ldrb	r3, [r3, #4]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f93a 	bl	8006dba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2204      	movs	r2, #4
 8006b4a:	761a      	strb	r2, [r3, #24]
      break;
 8006b4c:	e0f1      	b.n	8006d32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	791b      	ldrb	r3, [r3, #4]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fc7d 	bl	8007454 <USBH_LL_GetURBState>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d102      	bne.n	8006b6a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2209      	movs	r2, #9
 8006b68:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	d102      	bne.n	8006b76 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006b70:	2303      	movs	r3, #3
 8006b72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b74:	e0d6      	b.n	8006d24 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	f040 80d3 	bne.w	8006d24 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	220b      	movs	r2, #11
 8006b82:	761a      	strb	r2, [r3, #24]
      break;
 8006b84:	e0ce      	b.n	8006d24 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6899      	ldr	r1, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	899a      	ldrh	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	795b      	ldrb	r3, [r3, #5]
 8006b92:	2001      	movs	r0, #1
 8006b94:	9000      	str	r0, [sp, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f8ea 	bl	8006d70 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2206      	movs	r2, #6
 8006bac:	761a      	strb	r2, [r3, #24]
      break;
 8006bae:	e0c0      	b.n	8006d32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	795b      	ldrb	r3, [r3, #5]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fc4c 	bl	8007454 <USBH_LL_GetURBState>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d103      	bne.n	8006bce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2207      	movs	r2, #7
 8006bca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006bcc:	e0ac      	b.n	8006d28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d105      	bne.n	8006be0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	220c      	movs	r2, #12
 8006bd8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bde:	e0a3      	b.n	8006d28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d103      	bne.n	8006bee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2205      	movs	r2, #5
 8006bea:	761a      	strb	r2, [r3, #24]
      break;
 8006bec:	e09c      	b.n	8006d28 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	f040 8099 	bne.w	8006d28 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	220b      	movs	r2, #11
 8006bfa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006c00:	e092      	b.n	8006d28 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	791b      	ldrb	r3, [r3, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	2100      	movs	r1, #0
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f8d5 	bl	8006dba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2208      	movs	r2, #8
 8006c20:	761a      	strb	r2, [r3, #24]

      break;
 8006c22:	e086      	b.n	8006d32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	791b      	ldrb	r3, [r3, #4]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fc12 	bl	8007454 <USBH_LL_GetURBState>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d105      	bne.n	8006c46 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	220d      	movs	r2, #13
 8006c3e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006c44:	e072      	b.n	8006d2c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d103      	bne.n	8006c54 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	220b      	movs	r2, #11
 8006c50:	761a      	strb	r2, [r3, #24]
      break;
 8006c52:	e06b      	b.n	8006d2c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	2b05      	cmp	r3, #5
 8006c58:	d168      	bne.n	8006d2c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c5e:	e065      	b.n	8006d2c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	795b      	ldrb	r3, [r3, #5]
 8006c64:	2201      	movs	r2, #1
 8006c66:	9200      	str	r2, [sp, #0]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f87f 	bl	8006d70 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	220a      	movs	r2, #10
 8006c82:	761a      	strb	r2, [r3, #24]
      break;
 8006c84:	e055      	b.n	8006d32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	795b      	ldrb	r3, [r3, #5]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fbe1 	bl	8007454 <USBH_LL_GetURBState>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d105      	bne.n	8006ca8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	220d      	movs	r2, #13
 8006ca4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006ca6:	e043      	b.n	8006d30 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d103      	bne.n	8006cb6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2209      	movs	r2, #9
 8006cb2:	761a      	strb	r2, [r3, #24]
      break;
 8006cb4:	e03c      	b.n	8006d30 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d139      	bne.n	8006d30 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	220b      	movs	r2, #11
 8006cc0:	761a      	strb	r2, [r3, #24]
      break;
 8006cc2:	e035      	b.n	8006d30 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7e5b      	ldrb	r3, [r3, #25]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	765a      	strb	r2, [r3, #25]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	7e5b      	ldrb	r3, [r3, #25]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d806      	bhi.n	8006ce6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006ce4:	e025      	b.n	8006d32 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cec:	2106      	movs	r1, #6
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	795b      	ldrb	r3, [r3, #5]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f90c 	bl	8006f1c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	791b      	ldrb	r3, [r3, #4]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f906 	bl	8006f1c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006d16:	2302      	movs	r3, #2
 8006d18:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1a:	e00a      	b.n	8006d32 <USBH_HandleControl+0x2de>

    default:
      break;
 8006d1c:	bf00      	nop
 8006d1e:	e008      	b.n	8006d32 <USBH_HandleControl+0x2de>
      break;
 8006d20:	bf00      	nop
 8006d22:	e006      	b.n	8006d32 <USBH_HandleControl+0x2de>
      break;
 8006d24:	bf00      	nop
 8006d26:	e004      	b.n	8006d32 <USBH_HandleControl+0x2de>
      break;
 8006d28:	bf00      	nop
 8006d2a:	e002      	b.n	8006d32 <USBH_HandleControl+0x2de>
      break;
 8006d2c:	bf00      	nop
 8006d2e:	e000      	b.n	8006d32 <USBH_HandleControl+0x2de>
      break;
 8006d30:	bf00      	nop
  }

  return status;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af04      	add	r7, sp, #16
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006d4a:	79f9      	ldrb	r1, [r7, #7]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9303      	str	r3, [sp, #12]
 8006d50:	2308      	movs	r3, #8
 8006d52:	9302      	str	r3, [sp, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2200      	movs	r2, #0
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fb46 	bl	80073f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af04      	add	r7, sp, #16
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	460b      	mov	r3, r1
 8006d80:	80fb      	strh	r3, [r7, #6]
 8006d82:	4613      	mov	r3, r2
 8006d84:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006d94:	7979      	ldrb	r1, [r7, #5]
 8006d96:	7e3b      	ldrb	r3, [r7, #24]
 8006d98:	9303      	str	r3, [sp, #12]
 8006d9a:	88fb      	ldrh	r3, [r7, #6]
 8006d9c:	9302      	str	r3, [sp, #8]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	2301      	movs	r3, #1
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	2300      	movs	r3, #0
 8006da8:	2200      	movs	r2, #0
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fb21 	bl	80073f2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b088      	sub	sp, #32
 8006dbe:	af04      	add	r7, sp, #16
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	460b      	mov	r3, r1
 8006dca:	80fb      	strh	r3, [r7, #6]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006dd0:	7979      	ldrb	r1, [r7, #5]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	9303      	str	r3, [sp, #12]
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	9302      	str	r3, [sp, #8]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	2301      	movs	r3, #1
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	2300      	movs	r3, #0
 8006de4:	2201      	movs	r2, #1
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fb03 	bl	80073f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006dec:	2300      	movs	r3, #0

}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b088      	sub	sp, #32
 8006dfa:	af04      	add	r7, sp, #16
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	4611      	mov	r1, r2
 8006e02:	461a      	mov	r2, r3
 8006e04:	460b      	mov	r3, r1
 8006e06:	80fb      	strh	r3, [r7, #6]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006e1a:	7979      	ldrb	r1, [r7, #5]
 8006e1c:	7e3b      	ldrb	r3, [r7, #24]
 8006e1e:	9303      	str	r3, [sp, #12]
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	9302      	str	r3, [sp, #8]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	9301      	str	r3, [sp, #4]
 8006e28:	2301      	movs	r3, #1
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fade 	bl	80073f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af04      	add	r7, sp, #16
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	460b      	mov	r3, r1
 8006e50:	80fb      	strh	r3, [r7, #6]
 8006e52:	4613      	mov	r3, r2
 8006e54:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006e56:	7979      	ldrb	r1, [r7, #5]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9303      	str	r3, [sp, #12]
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	9302      	str	r3, [sp, #8]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	2301      	movs	r3, #1
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	2302      	movs	r3, #2
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fac0 	bl	80073f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af04      	add	r7, sp, #16
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	4608      	mov	r0, r1
 8006e86:	4611      	mov	r1, r2
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	70fb      	strb	r3, [r7, #3]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70bb      	strb	r3, [r7, #2]
 8006e92:	4613      	mov	r3, r2
 8006e94:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006e96:	7878      	ldrb	r0, [r7, #1]
 8006e98:	78ba      	ldrb	r2, [r7, #2]
 8006e9a:	78f9      	ldrb	r1, [r7, #3]
 8006e9c:	8b3b      	ldrh	r3, [r7, #24]
 8006e9e:	9302      	str	r3, [sp, #8]
 8006ea0:	7d3b      	ldrb	r3, [r7, #20]
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	7c3b      	ldrb	r3, [r7, #16]
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa53 	bl	8007356 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa72 	bl	80073b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f836 	bl	8006f58 <USBH_GetFreePipe>
 8006eec:	4603      	mov	r3, r0
 8006eee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006ef0:	89fb      	ldrh	r3, [r7, #14]
 8006ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00a      	beq.n	8006f10 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006efa:	78fa      	ldrb	r2, [r7, #3]
 8006efc:	89fb      	ldrh	r3, [r7, #14]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	33e0      	adds	r3, #224	; 0xe0
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006f10:	89fb      	ldrh	r3, [r7, #14]
 8006f12:	b2db      	uxtb	r3, r3
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	2b0f      	cmp	r3, #15
 8006f2c:	d80d      	bhi.n	8006f4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	33e0      	adds	r3, #224	; 0xe0
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	33e0      	adds	r3, #224	; 0xe0
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]
 8006f68:	e00f      	b.n	8006f8a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	33e0      	adds	r3, #224	; 0xe0
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	e007      	b.n	8006f94 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	3301      	adds	r3, #1
 8006f88:	73fb      	strb	r3, [r7, #15]
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	2b0f      	cmp	r3, #15
 8006f8e:	d9ec      	bls.n	8006f6a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	490e      	ldr	r1, [pc, #56]	; (8006fe0 <MX_USB_HOST_Init+0x40>)
 8006fa8:	480e      	ldr	r0, [pc, #56]	; (8006fe4 <MX_USB_HOST_Init+0x44>)
 8006faa:	f7fe fba7 	bl	80056fc <USBH_Init>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006fb4:	f7f9 fd8c 	bl	8000ad0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006fb8:	490b      	ldr	r1, [pc, #44]	; (8006fe8 <MX_USB_HOST_Init+0x48>)
 8006fba:	480a      	ldr	r0, [pc, #40]	; (8006fe4 <MX_USB_HOST_Init+0x44>)
 8006fbc:	f7fe fc2c 	bl	8005818 <USBH_RegisterClass>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006fc6:	f7f9 fd83 	bl	8000ad0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006fca:	4806      	ldr	r0, [pc, #24]	; (8006fe4 <MX_USB_HOST_Init+0x44>)
 8006fcc:	f7fe fcb0 	bl	8005930 <USBH_Start>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006fd6:	f7f9 fd7b 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006fda:	bf00      	nop
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	08007001 	.word	0x08007001
 8006fe4:	200001b0 	.word	0x200001b0
 8006fe8:	2000000c 	.word	0x2000000c

08006fec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006ff0:	4802      	ldr	r0, [pc, #8]	; (8006ffc <MX_USB_HOST_Process+0x10>)
 8006ff2:	f7fe fcad 	bl	8005950 <USBH_Process>
}
 8006ff6:	bf00      	nop
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	200001b0 	.word	0x200001b0

08007000 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	3b01      	subs	r3, #1
 8007010:	2b04      	cmp	r3, #4
 8007012:	d819      	bhi.n	8007048 <USBH_UserProcess+0x48>
 8007014:	a201      	add	r2, pc, #4	; (adr r2, 800701c <USBH_UserProcess+0x1c>)
 8007016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701a:	bf00      	nop
 800701c:	08007049 	.word	0x08007049
 8007020:	08007039 	.word	0x08007039
 8007024:	08007049 	.word	0x08007049
 8007028:	08007041 	.word	0x08007041
 800702c:	08007031 	.word	0x08007031
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007030:	4b09      	ldr	r3, [pc, #36]	; (8007058 <USBH_UserProcess+0x58>)
 8007032:	2203      	movs	r2, #3
 8007034:	701a      	strb	r2, [r3, #0]
  break;
 8007036:	e008      	b.n	800704a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <USBH_UserProcess+0x58>)
 800703a:	2202      	movs	r2, #2
 800703c:	701a      	strb	r2, [r3, #0]
  break;
 800703e:	e004      	b.n	800704a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <USBH_UserProcess+0x58>)
 8007042:	2201      	movs	r2, #1
 8007044:	701a      	strb	r2, [r3, #0]
  break;
 8007046:	e000      	b.n	800704a <USBH_UserProcess+0x4a>

  default:
  break;
 8007048:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000588 	.word	0x20000588

0800705c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08a      	sub	sp, #40	; 0x28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007064:	f107 0314 	add.w	r3, r7, #20
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	605a      	str	r2, [r3, #4]
 800706e:	609a      	str	r2, [r3, #8]
 8007070:	60da      	str	r2, [r3, #12]
 8007072:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800707c:	d147      	bne.n	800710e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	4b25      	ldr	r3, [pc, #148]	; (8007118 <HAL_HCD_MspInit+0xbc>)
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	4a24      	ldr	r2, [pc, #144]	; (8007118 <HAL_HCD_MspInit+0xbc>)
 8007088:	f043 0301 	orr.w	r3, r3, #1
 800708c:	6313      	str	r3, [r2, #48]	; 0x30
 800708e:	4b22      	ldr	r3, [pc, #136]	; (8007118 <HAL_HCD_MspInit+0xbc>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800709a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800709e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80070a8:	f107 0314 	add.w	r3, r7, #20
 80070ac:	4619      	mov	r1, r3
 80070ae:	481b      	ldr	r0, [pc, #108]	; (800711c <HAL_HCD_MspInit+0xc0>)
 80070b0:	f7fa f844 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80070b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80070b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ba:	2302      	movs	r3, #2
 80070bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070c2:	2300      	movs	r3, #0
 80070c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80070c6:	230a      	movs	r3, #10
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ca:	f107 0314 	add.w	r3, r7, #20
 80070ce:	4619      	mov	r1, r3
 80070d0:	4812      	ldr	r0, [pc, #72]	; (800711c <HAL_HCD_MspInit+0xc0>)
 80070d2:	f7fa f833 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070d6:	4b10      	ldr	r3, [pc, #64]	; (8007118 <HAL_HCD_MspInit+0xbc>)
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	4a0f      	ldr	r2, [pc, #60]	; (8007118 <HAL_HCD_MspInit+0xbc>)
 80070dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e0:	6353      	str	r3, [r2, #52]	; 0x34
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <HAL_HCD_MspInit+0xbc>)
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	4a0b      	ldr	r2, [pc, #44]	; (8007118 <HAL_HCD_MspInit+0xbc>)
 80070ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070f0:	6453      	str	r3, [r2, #68]	; 0x44
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <HAL_HCD_MspInit+0xbc>)
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	2043      	movs	r0, #67	; 0x43
 8007104:	f7f9 ffe3 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007108:	2043      	movs	r0, #67	; 0x43
 800710a:	f7f9 fffc 	bl	8001106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800710e:	bf00      	nop
 8007110:	3728      	adds	r7, #40	; 0x28
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40023800 	.word	0x40023800
 800711c:	40020000 	.word	0x40020000

08007120 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe ffed 	bl	800610e <USBH_LL_IncTimer>
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff f825 	bl	800619a <USBH_LL_Connect>
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff f82e 	bl	80061c8 <USBH_LL_Disconnect>
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
 8007180:	4613      	mov	r3, r2
 8007182:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe ffdf 	bl	8006162 <USBH_LL_PortEnabled>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe ffdf 	bl	800617e <USBH_LL_PortDisabled>
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d12a      	bne.n	8007230 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80071da:	4a18      	ldr	r2, [pc, #96]	; (800723c <USBH_LL_Init+0x74>)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a15      	ldr	r2, [pc, #84]	; (800723c <USBH_LL_Init+0x74>)
 80071e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071ea:	4b14      	ldr	r3, [pc, #80]	; (800723c <USBH_LL_Init+0x74>)
 80071ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80071f2:	4b12      	ldr	r3, [pc, #72]	; (800723c <USBH_LL_Init+0x74>)
 80071f4:	2208      	movs	r2, #8
 80071f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80071f8:	4b10      	ldr	r3, [pc, #64]	; (800723c <USBH_LL_Init+0x74>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <USBH_LL_Init+0x74>)
 8007200:	2200      	movs	r2, #0
 8007202:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007204:	4b0d      	ldr	r3, [pc, #52]	; (800723c <USBH_LL_Init+0x74>)
 8007206:	2202      	movs	r2, #2
 8007208:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800720a:	4b0c      	ldr	r3, [pc, #48]	; (800723c <USBH_LL_Init+0x74>)
 800720c:	2200      	movs	r2, #0
 800720e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007210:	480a      	ldr	r0, [pc, #40]	; (800723c <USBH_LL_Init+0x74>)
 8007212:	f7fa f961 	bl	80014d8 <HAL_HCD_Init>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800721c:	f7f9 fc58 	bl	8000ad0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007220:	4806      	ldr	r0, [pc, #24]	; (800723c <USBH_LL_Init+0x74>)
 8007222:	f7fa fd44 	bl	8001cae <HAL_HCD_GetCurrentFrame>
 8007226:	4603      	mov	r3, r0
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7fe ff60 	bl	80060f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	2000058c 	.word	0x2000058c

08007240 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007256:	4618      	mov	r0, r3
 8007258:	f7fa fcb3 	bl	8001bc2 <HAL_HCD_Start>
 800725c:	4603      	mov	r3, r0
 800725e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f95c 	bl	8007520 <USBH_Get_USB_Status>
 8007268:	4603      	mov	r3, r0
 800726a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800726c:	7bbb      	ldrb	r3, [r7, #14]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800728c:	4618      	mov	r0, r3
 800728e:	f7fa fcbb 	bl	8001c08 <HAL_HCD_Stop>
 8007292:	4603      	mov	r3, r0
 8007294:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 f941 	bl	8007520 <USBH_Get_USB_Status>
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80072b4:	2301      	movs	r3, #1
 80072b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fa fd03 	bl	8001cca <HAL_HCD_GetCurrentSpeed>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d00c      	beq.n	80072e4 <USBH_LL_GetSpeed+0x38>
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d80d      	bhi.n	80072ea <USBH_LL_GetSpeed+0x3e>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <USBH_LL_GetSpeed+0x2c>
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d003      	beq.n	80072de <USBH_LL_GetSpeed+0x32>
 80072d6:	e008      	b.n	80072ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]
    break;
 80072dc:	e008      	b.n	80072f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80072de:	2301      	movs	r3, #1
 80072e0:	73fb      	strb	r3, [r7, #15]
    break;
 80072e2:	e005      	b.n	80072f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80072e4:	2302      	movs	r3, #2
 80072e6:	73fb      	strb	r3, [r7, #15]
    break;
 80072e8:	e002      	b.n	80072f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80072ea:	2301      	movs	r3, #1
 80072ec:	73fb      	strb	r3, [r7, #15]
    break;
 80072ee:	bf00      	nop
  }
  return  speed;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007310:	4618      	mov	r0, r3
 8007312:	f7fa fc96 	bl	8001c42 <HAL_HCD_ResetPort>
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	4618      	mov	r0, r3
 800731e:	f000 f8ff 	bl	8007520 <USBH_Get_USB_Status>
 8007322:	4603      	mov	r3, r0
 8007324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007326:	7bbb      	ldrb	r3, [r7, #14]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007342:	78fa      	ldrb	r2, [r7, #3]
 8007344:	4611      	mov	r1, r2
 8007346:	4618      	mov	r0, r3
 8007348:	f7fa fc9d 	bl	8001c86 <HAL_HCD_HC_GetXferCount>
 800734c:	4603      	mov	r3, r0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007356:	b590      	push	{r4, r7, lr}
 8007358:	b089      	sub	sp, #36	; 0x24
 800735a:	af04      	add	r7, sp, #16
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	4608      	mov	r0, r1
 8007360:	4611      	mov	r1, r2
 8007362:	461a      	mov	r2, r3
 8007364:	4603      	mov	r3, r0
 8007366:	70fb      	strb	r3, [r7, #3]
 8007368:	460b      	mov	r3, r1
 800736a:	70bb      	strb	r3, [r7, #2]
 800736c:	4613      	mov	r3, r2
 800736e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800737e:	787c      	ldrb	r4, [r7, #1]
 8007380:	78ba      	ldrb	r2, [r7, #2]
 8007382:	78f9      	ldrb	r1, [r7, #3]
 8007384:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007386:	9302      	str	r3, [sp, #8]
 8007388:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	4623      	mov	r3, r4
 8007396:	f7fa f901 	bl	800159c <HAL_HCD_HC_Init>
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 f8bd 	bl	8007520 <USBH_Get_USB_Status>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd90      	pop	{r4, r7, pc}

080073b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fa f971 	bl	80016ba <HAL_HCD_HC_Halt>
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f89e 	bl	8007520 <USBH_Get_USB_Status>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80073f2:	b590      	push	{r4, r7, lr}
 80073f4:	b089      	sub	sp, #36	; 0x24
 80073f6:	af04      	add	r7, sp, #16
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	4608      	mov	r0, r1
 80073fc:	4611      	mov	r1, r2
 80073fe:	461a      	mov	r2, r3
 8007400:	4603      	mov	r3, r0
 8007402:	70fb      	strb	r3, [r7, #3]
 8007404:	460b      	mov	r3, r1
 8007406:	70bb      	strb	r3, [r7, #2]
 8007408:	4613      	mov	r3, r2
 800740a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800741a:	787c      	ldrb	r4, [r7, #1]
 800741c:	78ba      	ldrb	r2, [r7, #2]
 800741e:	78f9      	ldrb	r1, [r7, #3]
 8007420:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007424:	9303      	str	r3, [sp, #12]
 8007426:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007428:	9302      	str	r3, [sp, #8]
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	4623      	mov	r3, r4
 8007436:	f7fa f963 	bl	8001700 <HAL_HCD_HC_SubmitRequest>
 800743a:	4603      	mov	r3, r0
 800743c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 f86d 	bl	8007520 <USBH_Get_USB_Status>
 8007446:	4603      	mov	r3, r0
 8007448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800744a:	7bbb      	ldrb	r3, [r7, #14]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	bd90      	pop	{r4, r7, pc}

08007454 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f7fa fbf7 	bl	8001c5e <HAL_HCD_HC_GetURBState>
 8007470:	4603      	mov	r3, r0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800748c:	2b01      	cmp	r3, #1
 800748e:	d103      	bne.n	8007498 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	4618      	mov	r0, r3
 8007494:	f000 f870 	bl	8007578 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007498:	20c8      	movs	r0, #200	; 0xc8
 800749a:	f7f9 fd19 	bl	8000ed0 <HAL_Delay>
  return USBH_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
 80074b4:	4613      	mov	r3, r2
 80074b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	212c      	movs	r1, #44	; 0x2c
 80074c6:	fb01 f303 	mul.w	r3, r1, r3
 80074ca:	4413      	add	r3, r2
 80074cc:	333b      	adds	r3, #59	; 0x3b
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d009      	beq.n	80074e8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	212c      	movs	r1, #44	; 0x2c
 80074da:	fb01 f303 	mul.w	r3, r1, r3
 80074de:	4413      	add	r3, r2
 80074e0:	3354      	adds	r3, #84	; 0x54
 80074e2:	78ba      	ldrb	r2, [r7, #2]
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	e008      	b.n	80074fa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	212c      	movs	r1, #44	; 0x2c
 80074ee:	fb01 f303 	mul.w	r3, r1, r3
 80074f2:	4413      	add	r3, r2
 80074f4:	3355      	adds	r3, #85	; 0x55
 80074f6:	78ba      	ldrb	r2, [r7, #2]
 80074f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7f9 fcdd 	bl	8000ed0 <HAL_Delay>
}
 8007516:	bf00      	nop
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	2b03      	cmp	r3, #3
 8007532:	d817      	bhi.n	8007564 <USBH_Get_USB_Status+0x44>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <USBH_Get_USB_Status+0x1c>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	0800754d 	.word	0x0800754d
 8007540:	08007553 	.word	0x08007553
 8007544:	08007559 	.word	0x08007559
 8007548:	0800755f 	.word	0x0800755f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
    break;
 8007550:	e00b      	b.n	800756a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007552:	2302      	movs	r3, #2
 8007554:	73fb      	strb	r3, [r7, #15]
    break;
 8007556:	e008      	b.n	800756a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
    break;
 800755c:	e005      	b.n	800756a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800755e:	2302      	movs	r3, #2
 8007560:	73fb      	strb	r3, [r7, #15]
    break;
 8007562:	e002      	b.n	800756a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007564:	2302      	movs	r3, #2
 8007566:	73fb      	strb	r3, [r7, #15]
    break;
 8007568:	bf00      	nop
  }
  return usb_status;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d102      	bne.n	8007592 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800758c:	2300      	movs	r3, #0
 800758e:	73fb      	strb	r3, [r7, #15]
 8007590:	e001      	b.n	8007596 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007592:	2301      	movs	r3, #1
 8007594:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	461a      	mov	r2, r3
 800759a:	2101      	movs	r1, #1
 800759c:	4803      	ldr	r0, [pc, #12]	; (80075ac <MX_DriverVbusFS+0x34>)
 800759e:	f7f9 ff69 	bl	8001474 <HAL_GPIO_WritePin>
}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40020800 	.word	0x40020800

080075b0 <__errno>:
 80075b0:	4b01      	ldr	r3, [pc, #4]	; (80075b8 <__errno+0x8>)
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	2000002c 	.word	0x2000002c

080075bc <__libc_init_array>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	4d0d      	ldr	r5, [pc, #52]	; (80075f4 <__libc_init_array+0x38>)
 80075c0:	4c0d      	ldr	r4, [pc, #52]	; (80075f8 <__libc_init_array+0x3c>)
 80075c2:	1b64      	subs	r4, r4, r5
 80075c4:	10a4      	asrs	r4, r4, #2
 80075c6:	2600      	movs	r6, #0
 80075c8:	42a6      	cmp	r6, r4
 80075ca:	d109      	bne.n	80075e0 <__libc_init_array+0x24>
 80075cc:	4d0b      	ldr	r5, [pc, #44]	; (80075fc <__libc_init_array+0x40>)
 80075ce:	4c0c      	ldr	r4, [pc, #48]	; (8007600 <__libc_init_array+0x44>)
 80075d0:	f000 f92e 	bl	8007830 <_init>
 80075d4:	1b64      	subs	r4, r4, r5
 80075d6:	10a4      	asrs	r4, r4, #2
 80075d8:	2600      	movs	r6, #0
 80075da:	42a6      	cmp	r6, r4
 80075dc:	d105      	bne.n	80075ea <__libc_init_array+0x2e>
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e4:	4798      	blx	r3
 80075e6:	3601      	adds	r6, #1
 80075e8:	e7ee      	b.n	80075c8 <__libc_init_array+0xc>
 80075ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ee:	4798      	blx	r3
 80075f0:	3601      	adds	r6, #1
 80075f2:	e7f2      	b.n	80075da <__libc_init_array+0x1e>
 80075f4:	0800786c 	.word	0x0800786c
 80075f8:	0800786c 	.word	0x0800786c
 80075fc:	0800786c 	.word	0x0800786c
 8007600:	08007870 	.word	0x08007870

08007604 <malloc>:
 8007604:	4b02      	ldr	r3, [pc, #8]	; (8007610 <malloc+0xc>)
 8007606:	4601      	mov	r1, r0
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	f000 b87f 	b.w	800770c <_malloc_r>
 800760e:	bf00      	nop
 8007610:	2000002c 	.word	0x2000002c

08007614 <free>:
 8007614:	4b02      	ldr	r3, [pc, #8]	; (8007620 <free+0xc>)
 8007616:	4601      	mov	r1, r0
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	f000 b80b 	b.w	8007634 <_free_r>
 800761e:	bf00      	nop
 8007620:	2000002c 	.word	0x2000002c

08007624 <memset>:
 8007624:	4402      	add	r2, r0
 8007626:	4603      	mov	r3, r0
 8007628:	4293      	cmp	r3, r2
 800762a:	d100      	bne.n	800762e <memset+0xa>
 800762c:	4770      	bx	lr
 800762e:	f803 1b01 	strb.w	r1, [r3], #1
 8007632:	e7f9      	b.n	8007628 <memset+0x4>

08007634 <_free_r>:
 8007634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007636:	2900      	cmp	r1, #0
 8007638:	d044      	beq.n	80076c4 <_free_r+0x90>
 800763a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800763e:	9001      	str	r0, [sp, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f1a1 0404 	sub.w	r4, r1, #4
 8007646:	bfb8      	it	lt
 8007648:	18e4      	addlt	r4, r4, r3
 800764a:	f000 f8e3 	bl	8007814 <__malloc_lock>
 800764e:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <_free_r+0x94>)
 8007650:	9801      	ldr	r0, [sp, #4]
 8007652:	6813      	ldr	r3, [r2, #0]
 8007654:	b933      	cbnz	r3, 8007664 <_free_r+0x30>
 8007656:	6063      	str	r3, [r4, #4]
 8007658:	6014      	str	r4, [r2, #0]
 800765a:	b003      	add	sp, #12
 800765c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007660:	f000 b8de 	b.w	8007820 <__malloc_unlock>
 8007664:	42a3      	cmp	r3, r4
 8007666:	d908      	bls.n	800767a <_free_r+0x46>
 8007668:	6825      	ldr	r5, [r4, #0]
 800766a:	1961      	adds	r1, r4, r5
 800766c:	428b      	cmp	r3, r1
 800766e:	bf01      	itttt	eq
 8007670:	6819      	ldreq	r1, [r3, #0]
 8007672:	685b      	ldreq	r3, [r3, #4]
 8007674:	1949      	addeq	r1, r1, r5
 8007676:	6021      	streq	r1, [r4, #0]
 8007678:	e7ed      	b.n	8007656 <_free_r+0x22>
 800767a:	461a      	mov	r2, r3
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	b10b      	cbz	r3, 8007684 <_free_r+0x50>
 8007680:	42a3      	cmp	r3, r4
 8007682:	d9fa      	bls.n	800767a <_free_r+0x46>
 8007684:	6811      	ldr	r1, [r2, #0]
 8007686:	1855      	adds	r5, r2, r1
 8007688:	42a5      	cmp	r5, r4
 800768a:	d10b      	bne.n	80076a4 <_free_r+0x70>
 800768c:	6824      	ldr	r4, [r4, #0]
 800768e:	4421      	add	r1, r4
 8007690:	1854      	adds	r4, r2, r1
 8007692:	42a3      	cmp	r3, r4
 8007694:	6011      	str	r1, [r2, #0]
 8007696:	d1e0      	bne.n	800765a <_free_r+0x26>
 8007698:	681c      	ldr	r4, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	6053      	str	r3, [r2, #4]
 800769e:	4421      	add	r1, r4
 80076a0:	6011      	str	r1, [r2, #0]
 80076a2:	e7da      	b.n	800765a <_free_r+0x26>
 80076a4:	d902      	bls.n	80076ac <_free_r+0x78>
 80076a6:	230c      	movs	r3, #12
 80076a8:	6003      	str	r3, [r0, #0]
 80076aa:	e7d6      	b.n	800765a <_free_r+0x26>
 80076ac:	6825      	ldr	r5, [r4, #0]
 80076ae:	1961      	adds	r1, r4, r5
 80076b0:	428b      	cmp	r3, r1
 80076b2:	bf04      	itt	eq
 80076b4:	6819      	ldreq	r1, [r3, #0]
 80076b6:	685b      	ldreq	r3, [r3, #4]
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	bf04      	itt	eq
 80076bc:	1949      	addeq	r1, r1, r5
 80076be:	6021      	streq	r1, [r4, #0]
 80076c0:	6054      	str	r4, [r2, #4]
 80076c2:	e7ca      	b.n	800765a <_free_r+0x26>
 80076c4:	b003      	add	sp, #12
 80076c6:	bd30      	pop	{r4, r5, pc}
 80076c8:	20000890 	.word	0x20000890

080076cc <sbrk_aligned>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	4e0e      	ldr	r6, [pc, #56]	; (8007708 <sbrk_aligned+0x3c>)
 80076d0:	460c      	mov	r4, r1
 80076d2:	6831      	ldr	r1, [r6, #0]
 80076d4:	4605      	mov	r5, r0
 80076d6:	b911      	cbnz	r1, 80076de <sbrk_aligned+0x12>
 80076d8:	f000 f88c 	bl	80077f4 <_sbrk_r>
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 f887 	bl	80077f4 <_sbrk_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d00a      	beq.n	8007700 <sbrk_aligned+0x34>
 80076ea:	1cc4      	adds	r4, r0, #3
 80076ec:	f024 0403 	bic.w	r4, r4, #3
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d007      	beq.n	8007704 <sbrk_aligned+0x38>
 80076f4:	1a21      	subs	r1, r4, r0
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 f87c 	bl	80077f4 <_sbrk_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d101      	bne.n	8007704 <sbrk_aligned+0x38>
 8007700:	f04f 34ff 	mov.w	r4, #4294967295
 8007704:	4620      	mov	r0, r4
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	20000894 	.word	0x20000894

0800770c <_malloc_r>:
 800770c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007710:	1ccd      	adds	r5, r1, #3
 8007712:	f025 0503 	bic.w	r5, r5, #3
 8007716:	3508      	adds	r5, #8
 8007718:	2d0c      	cmp	r5, #12
 800771a:	bf38      	it	cc
 800771c:	250c      	movcc	r5, #12
 800771e:	2d00      	cmp	r5, #0
 8007720:	4607      	mov	r7, r0
 8007722:	db01      	blt.n	8007728 <_malloc_r+0x1c>
 8007724:	42a9      	cmp	r1, r5
 8007726:	d905      	bls.n	8007734 <_malloc_r+0x28>
 8007728:	230c      	movs	r3, #12
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	2600      	movs	r6, #0
 800772e:	4630      	mov	r0, r6
 8007730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007734:	4e2e      	ldr	r6, [pc, #184]	; (80077f0 <_malloc_r+0xe4>)
 8007736:	f000 f86d 	bl	8007814 <__malloc_lock>
 800773a:	6833      	ldr	r3, [r6, #0]
 800773c:	461c      	mov	r4, r3
 800773e:	bb34      	cbnz	r4, 800778e <_malloc_r+0x82>
 8007740:	4629      	mov	r1, r5
 8007742:	4638      	mov	r0, r7
 8007744:	f7ff ffc2 	bl	80076cc <sbrk_aligned>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	4604      	mov	r4, r0
 800774c:	d14d      	bne.n	80077ea <_malloc_r+0xde>
 800774e:	6834      	ldr	r4, [r6, #0]
 8007750:	4626      	mov	r6, r4
 8007752:	2e00      	cmp	r6, #0
 8007754:	d140      	bne.n	80077d8 <_malloc_r+0xcc>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	4631      	mov	r1, r6
 800775a:	4638      	mov	r0, r7
 800775c:	eb04 0803 	add.w	r8, r4, r3
 8007760:	f000 f848 	bl	80077f4 <_sbrk_r>
 8007764:	4580      	cmp	r8, r0
 8007766:	d13a      	bne.n	80077de <_malloc_r+0xd2>
 8007768:	6821      	ldr	r1, [r4, #0]
 800776a:	3503      	adds	r5, #3
 800776c:	1a6d      	subs	r5, r5, r1
 800776e:	f025 0503 	bic.w	r5, r5, #3
 8007772:	3508      	adds	r5, #8
 8007774:	2d0c      	cmp	r5, #12
 8007776:	bf38      	it	cc
 8007778:	250c      	movcc	r5, #12
 800777a:	4629      	mov	r1, r5
 800777c:	4638      	mov	r0, r7
 800777e:	f7ff ffa5 	bl	80076cc <sbrk_aligned>
 8007782:	3001      	adds	r0, #1
 8007784:	d02b      	beq.n	80077de <_malloc_r+0xd2>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	442b      	add	r3, r5
 800778a:	6023      	str	r3, [r4, #0]
 800778c:	e00e      	b.n	80077ac <_malloc_r+0xa0>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	1b52      	subs	r2, r2, r5
 8007792:	d41e      	bmi.n	80077d2 <_malloc_r+0xc6>
 8007794:	2a0b      	cmp	r2, #11
 8007796:	d916      	bls.n	80077c6 <_malloc_r+0xba>
 8007798:	1961      	adds	r1, r4, r5
 800779a:	42a3      	cmp	r3, r4
 800779c:	6025      	str	r5, [r4, #0]
 800779e:	bf18      	it	ne
 80077a0:	6059      	strne	r1, [r3, #4]
 80077a2:	6863      	ldr	r3, [r4, #4]
 80077a4:	bf08      	it	eq
 80077a6:	6031      	streq	r1, [r6, #0]
 80077a8:	5162      	str	r2, [r4, r5]
 80077aa:	604b      	str	r3, [r1, #4]
 80077ac:	4638      	mov	r0, r7
 80077ae:	f104 060b 	add.w	r6, r4, #11
 80077b2:	f000 f835 	bl	8007820 <__malloc_unlock>
 80077b6:	f026 0607 	bic.w	r6, r6, #7
 80077ba:	1d23      	adds	r3, r4, #4
 80077bc:	1af2      	subs	r2, r6, r3
 80077be:	d0b6      	beq.n	800772e <_malloc_r+0x22>
 80077c0:	1b9b      	subs	r3, r3, r6
 80077c2:	50a3      	str	r3, [r4, r2]
 80077c4:	e7b3      	b.n	800772e <_malloc_r+0x22>
 80077c6:	6862      	ldr	r2, [r4, #4]
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	bf0c      	ite	eq
 80077cc:	6032      	streq	r2, [r6, #0]
 80077ce:	605a      	strne	r2, [r3, #4]
 80077d0:	e7ec      	b.n	80077ac <_malloc_r+0xa0>
 80077d2:	4623      	mov	r3, r4
 80077d4:	6864      	ldr	r4, [r4, #4]
 80077d6:	e7b2      	b.n	800773e <_malloc_r+0x32>
 80077d8:	4634      	mov	r4, r6
 80077da:	6876      	ldr	r6, [r6, #4]
 80077dc:	e7b9      	b.n	8007752 <_malloc_r+0x46>
 80077de:	230c      	movs	r3, #12
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	4638      	mov	r0, r7
 80077e4:	f000 f81c 	bl	8007820 <__malloc_unlock>
 80077e8:	e7a1      	b.n	800772e <_malloc_r+0x22>
 80077ea:	6025      	str	r5, [r4, #0]
 80077ec:	e7de      	b.n	80077ac <_malloc_r+0xa0>
 80077ee:	bf00      	nop
 80077f0:	20000890 	.word	0x20000890

080077f4 <_sbrk_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	4d06      	ldr	r5, [pc, #24]	; (8007810 <_sbrk_r+0x1c>)
 80077f8:	2300      	movs	r3, #0
 80077fa:	4604      	mov	r4, r0
 80077fc:	4608      	mov	r0, r1
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	f7f9 fa82 	bl	8000d08 <_sbrk>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_sbrk_r+0x1a>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_sbrk_r+0x1a>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	20000898 	.word	0x20000898

08007814 <__malloc_lock>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__malloc_lock+0x8>)
 8007816:	f000 b809 	b.w	800782c <__retarget_lock_acquire_recursive>
 800781a:	bf00      	nop
 800781c:	2000089c 	.word	0x2000089c

08007820 <__malloc_unlock>:
 8007820:	4801      	ldr	r0, [pc, #4]	; (8007828 <__malloc_unlock+0x8>)
 8007822:	f000 b804 	b.w	800782e <__retarget_lock_release_recursive>
 8007826:	bf00      	nop
 8007828:	2000089c 	.word	0x2000089c

0800782c <__retarget_lock_acquire_recursive>:
 800782c:	4770      	bx	lr

0800782e <__retarget_lock_release_recursive>:
 800782e:	4770      	bx	lr

08007830 <_init>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	bf00      	nop
 8007834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007836:	bc08      	pop	{r3}
 8007838:	469e      	mov	lr, r3
 800783a:	4770      	bx	lr

0800783c <_fini>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr
